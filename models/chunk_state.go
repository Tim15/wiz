// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChunkState chunk state
// swagger:model ChunkState
type ChunkState struct {

	// the state of the data chunk.
	// Required: true
	// Enum: [Syncing Determining Validating Running Failed Succeeded]
	State *string `json:"state"`
}

// Validate validates this chunk state
func (m *ChunkState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var chunkStateTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Syncing","Determining","Validating","Running","Failed","Succeeded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chunkStateTypeStatePropEnum = append(chunkStateTypeStatePropEnum, v)
	}
}

const (

	// ChunkStateStateSyncing captures enum value "Syncing"
	ChunkStateStateSyncing string = "Syncing"

	// ChunkStateStateDetermining captures enum value "Determining"
	ChunkStateStateDetermining string = "Determining"

	// ChunkStateStateValidating captures enum value "Validating"
	ChunkStateStateValidating string = "Validating"

	// ChunkStateStateRunning captures enum value "Running"
	ChunkStateStateRunning string = "Running"

	// ChunkStateStateFailed captures enum value "Failed"
	ChunkStateStateFailed string = "Failed"

	// ChunkStateStateSucceeded captures enum value "Succeeded"
	ChunkStateStateSucceeded string = "Succeeded"
)

// prop value enum
func (m *ChunkState) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, chunkStateTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ChunkState) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChunkState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChunkState) UnmarshalBinary(b []byte) error {
	var res ChunkState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
