// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessorState processor state
// swagger:model ProcessorState
type ProcessorState struct {

	// the state of the processor
	// Required: true
	// Enum: [Uninitialized Configured Idle Processing Failed Succeeded CompletedWithErrors]
	State *string `json:"state"`
}

// Validate validates this processor state
func (m *ProcessorState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var processorStateTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Uninitialized","Configured","Idle","Processing","Failed","Succeeded","CompletedWithErrors"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		processorStateTypeStatePropEnum = append(processorStateTypeStatePropEnum, v)
	}
}

const (

	// ProcessorStateStateUninitialized captures enum value "Uninitialized"
	ProcessorStateStateUninitialized string = "Uninitialized"

	// ProcessorStateStateConfigured captures enum value "Configured"
	ProcessorStateStateConfigured string = "Configured"

	// ProcessorStateStateIdle captures enum value "Idle"
	ProcessorStateStateIdle string = "Idle"

	// ProcessorStateStateProcessing captures enum value "Processing"
	ProcessorStateStateProcessing string = "Processing"

	// ProcessorStateStateFailed captures enum value "Failed"
	ProcessorStateStateFailed string = "Failed"

	// ProcessorStateStateSucceeded captures enum value "Succeeded"
	ProcessorStateStateSucceeded string = "Succeeded"

	// ProcessorStateStateCompletedWithErrors captures enum value "CompletedWithErrors"
	ProcessorStateStateCompletedWithErrors string = "CompletedWithErrors"
)

// prop value enum
func (m *ProcessorState) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, processorStateTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProcessorState) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessorState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessorState) UnmarshalBinary(b []byte) error {
	var res ProcessorState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
