// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Run run
// swagger:model Run
type Run struct {
	ProcessorState

	// the current configuration
	Configuration Configuration `json:"configuration,omitempty"`

	// the globally unique ID of the run
	// Required: true
	RunID *string `json:"runID"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Run) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ProcessorState
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ProcessorState = aO0

	// AO1
	var dataAO1 struct {
		Configuration Configuration `json:"configuration,omitempty"`

		RunID *string `json:"runID"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Configuration = dataAO1.Configuration

	m.RunID = dataAO1.RunID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Run) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ProcessorState)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Configuration Configuration `json:"configuration,omitempty"`

		RunID *string `json:"runID"`
	}

	dataAO1.Configuration = m.Configuration

	dataAO1.RunID = m.RunID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this run
func (m *Run) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ProcessorState
	if err := m.ProcessorState.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Run) validateRunID(formats strfmt.Registry) error {

	if err := validate.Required("runID", "body", m.RunID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Run) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Run) UnmarshalBinary(b []byte) error {
	var res Run
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
