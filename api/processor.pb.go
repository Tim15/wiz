// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: processor.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Data is either raw data, in JSON, or a filesystem reference
type DataType int32

const (
	DataType_RAW_JSON       DataType = 0
	DataType_FILESYSTEM_REF DataType = 1
)

var DataType_name = map[int32]string{
	0: "RAW_JSON",
	1: "FILESYSTEM_REF",
}

var DataType_value = map[string]int32{
	"RAW_JSON":       0,
	"FILESYSTEM_REF": 1,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{0}
}

type State int32

const (
	State_UNINITIALIZED State = 0
	State_CONFIGURED    State = 1
	State_DETERMINING   State = 2
	State_DETERMINED    State = 3
	State_VALIDATING    State = 4
	State_RUNNING       State = 5
	State_SUCCESS       State = 6
	State_FAILURE       State = 7
)

var State_name = map[int32]string{
	0: "UNINITIALIZED",
	1: "CONFIGURED",
	2: "DETERMINING",
	3: "DETERMINED",
	4: "VALIDATING",
	5: "RUNNING",
	6: "SUCCESS",
	7: "FAILURE",
}

var State_value = map[string]int32{
	"UNINITIALIZED": 0,
	"CONFIGURED":    1,
	"DETERMINING":   2,
	"DETERMINED":    3,
	"VALIDATING":    4,
	"RUNNING":       5,
	"SUCCESS":       6,
	"FAILURE":       7,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{1}
}

type Processors struct {
	Processors []Processor `protobuf:"bytes,1,rep,name=processors,proto3" json:"processors"`
}

func (m *Processors) Reset()         { *m = Processors{} }
func (m *Processors) String() string { return proto.CompactTextString(m) }
func (*Processors) ProtoMessage()    {}
func (*Processors) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{0}
}
func (m *Processors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Processors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Processors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Processors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Processors.Merge(m, src)
}
func (m *Processors) XXX_Size() int {
	return m.Size()
}
func (m *Processors) XXX_DiscardUnknown() {
	xxx_messageInfo_Processors.DiscardUnknown(m)
}

var xxx_messageInfo_Processors proto.InternalMessageInfo

func (m *Processors) GetProcessors() []Processor {
	if m != nil {
		return m.Processors
	}
	return nil
}

type Runs struct {
	Runs []Run `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs"`
}

func (m *Runs) Reset()         { *m = Runs{} }
func (m *Runs) String() string { return proto.CompactTextString(m) }
func (*Runs) ProtoMessage()    {}
func (*Runs) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{1}
}
func (m *Runs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Runs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Runs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Runs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Runs.Merge(m, src)
}
func (m *Runs) XXX_Size() int {
	return m.Size()
}
func (m *Runs) XXX_DiscardUnknown() {
	xxx_messageInfo_Runs.DiscardUnknown(m)
}

var xxx_messageInfo_Runs proto.InternalMessageInfo

func (m *Runs) GetRuns() []Run {
	if m != nil {
		return m.Runs
	}
	return nil
}

type Processor struct {
	//    ProcessorID ID = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
	ProcID string `protobuf:"bytes,1,opt,name=procID,proto3" json:"procID,omitempty"`
	// human readable name
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *Processor) Reset()         { *m = Processor{} }
func (m *Processor) String() string { return proto.CompactTextString(m) }
func (*Processor) ProtoMessage()    {}
func (*Processor) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{2}
}
func (m *Processor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Processor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Processor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Processor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Processor.Merge(m, src)
}
func (m *Processor) XXX_Size() int {
	return m.Size()
}
func (m *Processor) XXX_DiscardUnknown() {
	xxx_messageInfo_Processor.DiscardUnknown(m)
}

var xxx_messageInfo_Processor proto.InternalMessageInfo

func (m *Processor) GetProcID() string {
	if m != nil {
		return m.ProcID
	}
	return ""
}

func (m *Processor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Processor) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// No more one-level messages, causes reusability issues.
type Configuration struct {
	Config *types.Any `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *Configuration) Reset()         { *m = Configuration{} }
func (m *Configuration) String() string { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()    {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{3}
}
func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(m, src)
}
func (m *Configuration) XXX_Size() int {
	return m.Size()
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func (m *Configuration) GetConfig() *types.Any {
	if m != nil {
		return m.Config
	}
	return nil
}

type ProcessorID struct {
	ProcID string `protobuf:"bytes,1,opt,name=procID,proto3" json:"procID,omitempty"`
}

func (m *ProcessorID) Reset()         { *m = ProcessorID{} }
func (m *ProcessorID) String() string { return proto.CompactTextString(m) }
func (*ProcessorID) ProtoMessage()    {}
func (*ProcessorID) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{4}
}
func (m *ProcessorID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessorID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessorID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessorID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessorID.Merge(m, src)
}
func (m *ProcessorID) XXX_Size() int {
	return m.Size()
}
func (m *ProcessorID) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessorID.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessorID proto.InternalMessageInfo

func (m *ProcessorID) GetProcID() string {
	if m != nil {
		return m.ProcID
	}
	return ""
}

type AddDataRequest struct {
	ID   *IndividualRunID `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Data *Data            `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AddDataRequest) Reset()         { *m = AddDataRequest{} }
func (m *AddDataRequest) String() string { return proto.CompactTextString(m) }
func (*AddDataRequest) ProtoMessage()    {}
func (*AddDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{5}
}
func (m *AddDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDataRequest.Merge(m, src)
}
func (m *AddDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDataRequest proto.InternalMessageInfo

func (m *AddDataRequest) GetID() *IndividualRunID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *AddDataRequest) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// ConfigureRequest requires a processor ID, Run ID, and the configuration to send
type ConfigureRequest struct {
	//    ProcessorID processorID = 1;
	// string runID = 2;
	ID *IndividualRunID `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//    Configuration config = 2;
	Config *types.Any `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *ConfigureRequest) Reset()         { *m = ConfigureRequest{} }
func (m *ConfigureRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigureRequest) ProtoMessage()    {}
func (*ConfigureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{6}
}
func (m *ConfigureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureRequest.Merge(m, src)
}
func (m *ConfigureRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfigureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureRequest proto.InternalMessageInfo

func (m *ConfigureRequest) GetID() *IndividualRunID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ConfigureRequest) GetConfig() *types.Any {
	if m != nil {
		return m.Config
	}
	return nil
}

// A run is globally unique, associated with configuration, and has a state
type Run struct {
	RunID  string     `protobuf:"bytes,1,opt,name=runID,proto3" json:"runID,omitempty"`
	Config *types.Any `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	State  State      `protobuf:"varint,3,opt,name=state,proto3,enum=api.State" json:"state,omitempty"`
}

func (m *Run) Reset()         { *m = Run{} }
func (m *Run) String() string { return proto.CompactTextString(m) }
func (*Run) ProtoMessage()    {}
func (*Run) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{7}
}
func (m *Run) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Run) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Run.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Run) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Run.Merge(m, src)
}
func (m *Run) XXX_Size() int {
	return m.Size()
}
func (m *Run) XXX_DiscardUnknown() {
	xxx_messageInfo_Run.DiscardUnknown(m)
}

var xxx_messageInfo_Run proto.InternalMessageInfo

func (m *Run) GetRunID() string {
	if m != nil {
		return m.RunID
	}
	return ""
}

func (m *Run) GetConfig() *types.Any {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Run) GetState() State {
	if m != nil {
		return m.State
	}
	return State_UNINITIALIZED
}

// IndividualRunRequest identifies one specific run on a processor
type IndividualRunID struct {
	ProcID string `protobuf:"bytes,1,opt,name=procID,proto3" json:"procID,omitempty"`
	RunID  string `protobuf:"bytes,2,opt,name=runID,proto3" json:"runID,omitempty"`
}

func (m *IndividualRunID) Reset()         { *m = IndividualRunID{} }
func (m *IndividualRunID) String() string { return proto.CompactTextString(m) }
func (*IndividualRunID) ProtoMessage()    {}
func (*IndividualRunID) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{8}
}
func (m *IndividualRunID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndividualRunID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndividualRunID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndividualRunID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndividualRunID.Merge(m, src)
}
func (m *IndividualRunID) XXX_Size() int {
	return m.Size()
}
func (m *IndividualRunID) XXX_DiscardUnknown() {
	xxx_messageInfo_IndividualRunID.DiscardUnknown(m)
}

var xxx_messageInfo_IndividualRunID proto.InternalMessageInfo

func (m *IndividualRunID) GetProcID() string {
	if m != nil {
		return m.ProcID
	}
	return ""
}

func (m *IndividualRunID) GetRunID() string {
	if m != nil {
		return m.RunID
	}
	return ""
}

type Data struct {
	Chunk_ID string   `protobuf:"bytes,1,opt,name=chunk_ID,json=chunkID,proto3" json:"chunk_ID,omitempty"`
	Type     DataType `protobuf:"varint,2,opt,name=type,proto3,enum=api.DataType" json:"type,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Data_Raw
	//	*Data_Fs
	Data           isData_Data `protobuf_oneof:"data"`
	OutputChunk_ID string      `protobuf:"bytes,5,opt,name=output_chunk_ID,json=outputChunkID,proto3" json:"output_chunk_ID,omitempty"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{9}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.Size()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

type isData_Data interface {
	isData_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Data_Raw struct {
	Raw *types.Any `protobuf:"bytes,3,opt,name=raw,proto3,oneof" json:"raw,omitempty"`
}
type Data_Fs struct {
	Fs *FilesystemReference `protobuf:"bytes,4,opt,name=fs,proto3,oneof" json:"fs,omitempty"`
}

func (*Data_Raw) isData_Data() {}
func (*Data_Fs) isData_Data()  {}

func (m *Data) GetData() isData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Data) GetChunk_ID() string {
	if m != nil {
		return m.Chunk_ID
	}
	return ""
}

func (m *Data) GetType() DataType {
	if m != nil {
		return m.Type
	}
	return DataType_RAW_JSON
}

func (m *Data) GetRaw() *types.Any {
	if x, ok := m.GetData().(*Data_Raw); ok {
		return x.Raw
	}
	return nil
}

func (m *Data) GetFs() *FilesystemReference {
	if x, ok := m.GetData().(*Data_Fs); ok {
		return x.Fs
	}
	return nil
}

func (m *Data) GetOutputChunk_ID() string {
	if m != nil {
		return m.OutputChunk_ID
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Data) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Data_Raw)(nil),
		(*Data_Fs)(nil),
	}
}

// DataSpec represents all the chunks that the processor has both recieved and written
type DataSpec struct {
	In  []*Data `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	Out []*Data `protobuf:"bytes,2,rep,name=out,proto3" json:"out,omitempty"`
}

func (m *DataSpec) Reset()         { *m = DataSpec{} }
func (m *DataSpec) String() string { return proto.CompactTextString(m) }
func (*DataSpec) ProtoMessage()    {}
func (*DataSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{10}
}
func (m *DataSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataSpec.Merge(m, src)
}
func (m *DataSpec) XXX_Size() int {
	return m.Size()
}
func (m *DataSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DataSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DataSpec proto.InternalMessageInfo

func (m *DataSpec) GetIn() []*Data {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *DataSpec) GetOut() []*Data {
	if m != nil {
		return m.Out
	}
	return nil
}

type FilesystemReference struct {
	Driver   string `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (m *FilesystemReference) Reset()         { *m = FilesystemReference{} }
func (m *FilesystemReference) String() string { return proto.CompactTextString(m) }
func (*FilesystemReference) ProtoMessage()    {}
func (*FilesystemReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{11}
}
func (m *FilesystemReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilesystemReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilesystemReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilesystemReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilesystemReference.Merge(m, src)
}
func (m *FilesystemReference) XXX_Size() int {
	return m.Size()
}
func (m *FilesystemReference) XXX_DiscardUnknown() {
	xxx_messageInfo_FilesystemReference.DiscardUnknown(m)
}

var xxx_messageInfo_FilesystemReference proto.InternalMessageInfo

func (m *FilesystemReference) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *FilesystemReference) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

type StateUpdate struct {
	OldState State `protobuf:"varint,1,opt,name=oldState,proto3,enum=api.State" json:"oldState,omitempty"`
	NewState State `protobuf:"varint,2,opt,name=newState,proto3,enum=api.State" json:"newState,omitempty"`
}

func (m *StateUpdate) Reset()         { *m = StateUpdate{} }
func (m *StateUpdate) String() string { return proto.CompactTextString(m) }
func (*StateUpdate) ProtoMessage()    {}
func (*StateUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{12}
}
func (m *StateUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateUpdate.Merge(m, src)
}
func (m *StateUpdate) XXX_Size() int {
	return m.Size()
}
func (m *StateUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_StateUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_StateUpdate proto.InternalMessageInfo

func (m *StateUpdate) GetOldState() State {
	if m != nil {
		return m.OldState
	}
	return State_UNINITIALIZED
}

func (m *StateUpdate) GetNewState() State {
	if m != nil {
		return m.NewState
	}
	return State_UNINITIALIZED
}

func init() {
	proto.RegisterEnum("api.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("api.State", State_name, State_value)
	proto.RegisterType((*Processors)(nil), "api.Processors")
	proto.RegisterType((*Runs)(nil), "api.Runs")
	proto.RegisterType((*Processor)(nil), "api.Processor")
	proto.RegisterType((*Configuration)(nil), "api.Configuration")
	proto.RegisterType((*ProcessorID)(nil), "api.ProcessorID")
	proto.RegisterType((*AddDataRequest)(nil), "api.AddDataRequest")
	proto.RegisterType((*ConfigureRequest)(nil), "api.ConfigureRequest")
	proto.RegisterType((*Run)(nil), "api.Run")
	proto.RegisterType((*IndividualRunID)(nil), "api.IndividualRunID")
	proto.RegisterType((*Data)(nil), "api.Data")
	proto.RegisterType((*DataSpec)(nil), "api.DataSpec")
	proto.RegisterType((*FilesystemReference)(nil), "api.FilesystemReference")
	proto.RegisterType((*StateUpdate)(nil), "api.StateUpdate")
}

func init() { proto.RegisterFile("processor.proto", fileDescriptor_6783724e039e1aa6) }

var fileDescriptor_6783724e039e1aa6 = []byte{
	// 906 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x6d, 0x6f, 0xdb, 0x54,
	0x14, 0x8e, 0x9d, 0x34, 0x2f, 0x27, 0x6d, 0x6a, 0xce, 0xc6, 0x94, 0x66, 0x22, 0x14, 0x0b, 0xaa,
	0xaa, 0x1a, 0xe9, 0x08, 0x6f, 0x12, 0x08, 0xa1, 0x24, 0x76, 0xb2, 0x8b, 0xba, 0x6c, 0xdc, 0x24,
	0x20, 0x90, 0x50, 0xe5, 0x26, 0x37, 0x99, 0xb5, 0xd4, 0x36, 0xf6, 0x75, 0xa7, 0x7c, 0xe5, 0x17,
	0xf0, 0xb3, 0x26, 0x3e, 0xed, 0x23, 0x9f, 0x10, 0x6a, 0x25, 0x7e, 0x07, 0xba, 0xf7, 0xc6, 0x4e,
	0xd3, 0x36, 0x88, 0x7d, 0xf3, 0x39, 0xe7, 0x39, 0xc7, 0xcf, 0x79, 0xb9, 0x0f, 0xec, 0x06, 0xa1,
	0x3f, 0x66, 0x51, 0xe4, 0x87, 0x8d, 0x20, 0xf4, 0xb9, 0x8f, 0x59, 0x27, 0x70, 0x6b, 0x7b, 0x33,
	0xdf, 0x9f, 0xcd, 0xd9, 0xb1, 0x74, 0x9d, 0xc5, 0xd3, 0x63, 0xc7, 0x5b, 0xa8, 0x78, 0xed, 0xe1,
	0xcd, 0x10, 0x3b, 0x0f, 0x78, 0x12, 0xfc, 0x78, 0xe6, 0xf2, 0x17, 0xf1, 0x59, 0x63, 0xec, 0x9f,
	0x1f, 0xcf, 0xfc, 0x99, 0xbf, 0x42, 0x09, 0x4b, 0x1a, 0xf2, 0x4b, 0xc1, 0xcd, 0x36, 0xc0, 0xf3,
	0xe4, 0xf7, 0x11, 0x7e, 0x06, 0x90, 0x92, 0x89, 0xaa, 0xda, 0x7e, 0xf6, 0xb0, 0xdc, 0xac, 0x34,
	0x9c, 0xc0, 0x6d, 0xa4, 0xa0, 0x76, 0xee, 0xf5, 0x5f, 0xef, 0x67, 0xe8, 0x35, 0x9c, 0x79, 0x04,
	0x39, 0x1a, 0x7b, 0x11, 0x9a, 0x90, 0x0b, 0x63, 0x2f, 0xc9, 0x2b, 0xca, 0x3c, 0x1a, 0x7b, 0xcb,
	0x0c, 0x19, 0x33, 0xbf, 0x87, 0x52, 0x5a, 0x0a, 0x1f, 0x40, 0x5e, 0x94, 0x21, 0x56, 0x55, 0xdb,
	0xd7, 0x0e, 0x4b, 0x74, 0x69, 0x21, 0x42, 0xce, 0x73, 0xce, 0x59, 0x55, 0x97, 0x5e, 0xf9, 0x8d,
	0x55, 0x28, 0x5c, 0xb0, 0x30, 0x72, 0x7d, 0xaf, 0x9a, 0x95, 0xee, 0xc4, 0x34, 0xbf, 0x81, 0x9d,
	0x8e, 0xef, 0x4d, 0xdd, 0x59, 0x1c, 0x3a, 0xdc, 0xf5, 0x3d, 0x7c, 0x04, 0xf9, 0xb1, 0x74, 0x48,
	0x64, 0xb9, 0x79, 0xbf, 0xa1, 0x06, 0xd6, 0x48, 0x46, 0xd1, 0x68, 0x79, 0x0b, 0xba, 0xc4, 0x98,
	0x1f, 0x41, 0x39, 0x65, 0x44, 0xac, 0x4d, 0x9c, 0xcc, 0x11, 0x54, 0x5a, 0x93, 0x89, 0xe5, 0x70,
	0x87, 0xb2, 0x5f, 0x63, 0x16, 0x71, 0xfc, 0x10, 0xf4, 0x25, 0x4a, 0xfc, 0x42, 0x34, 0x4b, 0xbc,
	0x89, 0x7b, 0xe1, 0x4e, 0x62, 0x67, 0x4e, 0x63, 0x8f, 0x58, 0x54, 0x27, 0x16, 0xbe, 0x07, 0xb9,
	0x89, 0xc3, 0x1d, 0xd9, 0x4b, 0xb9, 0x59, 0x92, 0x38, 0x59, 0x45, 0xba, 0xcd, 0x29, 0x18, 0x09,
	0x79, 0xf6, 0x76, 0x85, 0x57, 0x5d, 0xea, 0xff, 0xa3, 0xcb, 0x97, 0x90, 0xa5, 0xb1, 0x87, 0xf7,
	0x61, 0x2b, 0x14, 0x15, 0x96, 0xcd, 0x29, 0xe3, 0xed, 0x4a, 0xe1, 0x3e, 0x6c, 0x45, 0xdc, 0xe1,
	0x4c, 0x4e, 0xb7, 0xd2, 0x04, 0xc9, 0x70, 0x20, 0x3c, 0x54, 0x05, 0xcc, 0x6f, 0x61, 0xf7, 0x06,
	0xe3, 0x8d, 0xab, 0x4e, 0x09, 0xe9, 0xd7, 0x08, 0x99, 0x7f, 0x68, 0x90, 0x13, 0x43, 0xc2, 0x3d,
	0x28, 0x8e, 0x5f, 0xc4, 0xde, 0xcb, 0xd3, 0x34, 0xb1, 0x20, 0x6d, 0x62, 0xe1, 0x07, 0x90, 0xe3,
	0x8b, 0x40, 0x1d, 0x49, 0xa5, 0xb9, 0x93, 0x0e, 0x76, 0xb8, 0x08, 0x18, 0x95, 0x21, 0x3c, 0x84,
	0x6c, 0xe8, 0xbc, 0xfa, 0xaf, 0x2b, 0x78, 0x92, 0xa1, 0x02, 0x82, 0x47, 0xa0, 0x4f, 0xa3, 0x6a,
	0x4e, 0x02, 0xab, 0xb2, 0x54, 0xd7, 0x9d, 0xb3, 0x68, 0x11, 0x71, 0x76, 0x4e, 0xd9, 0x94, 0x85,
	0xcc, 0x1b, 0xb3, 0x27, 0x19, 0xaa, 0x4f, 0x23, 0x3c, 0x80, 0x5d, 0x3f, 0xe6, 0x41, 0xcc, 0x4f,
	0x53, 0x6a, 0x5b, 0x92, 0xda, 0x8e, 0x72, 0x77, 0x14, 0xc1, 0x76, 0x5e, 0x6d, 0xde, 0x6c, 0x43,
	0x51, 0xf0, 0x1a, 0x04, 0x6c, 0x8c, 0x7b, 0xa0, 0xbb, 0xde, 0xf2, 0x81, 0x5c, 0xbb, 0x05, 0xdd,
	0xf5, 0xf0, 0x21, 0x64, 0xfd, 0x98, 0x57, 0xf5, 0x9b, 0x31, 0xe1, 0x35, 0x09, 0xdc, 0xbb, 0x83,
	0x90, 0x98, 0xea, 0x24, 0x74, 0x2f, 0x58, 0x98, 0x4c, 0x55, 0x59, 0x58, 0x83, 0xe2, 0xdc, 0x1f,
	0xcb, 0xd7, 0xb0, 0x1c, 0x6c, 0x6a, 0x9b, 0xbf, 0x40, 0x59, 0x2e, 0x6b, 0x14, 0x4c, 0x1c, 0xce,
	0xf0, 0x00, 0x8a, 0xfe, 0x7c, 0x22, 0x3d, 0xb2, 0xc8, 0xfa, 0x42, 0xd3, 0x98, 0xc0, 0x79, 0xec,
	0x95, 0xc2, 0xe9, 0xb7, 0x71, 0x49, 0xec, 0xe8, 0x91, 0xea, 0x56, 0x6c, 0x01, 0xb7, 0xa1, 0x48,
	0x5b, 0x3f, 0x9e, 0x7e, 0x37, 0x78, 0xd6, 0x37, 0x32, 0x88, 0x50, 0xe9, 0x92, 0x13, 0x7b, 0xf0,
	0xd3, 0x60, 0x68, 0x3f, 0x3d, 0xa5, 0x76, 0xd7, 0xd0, 0x8e, 0x7e, 0xd3, 0x60, 0x4b, 0xd5, 0x7f,
	0x07, 0x76, 0x46, 0x7d, 0xd2, 0x27, 0x43, 0xd2, 0x3a, 0x21, 0x3f, 0xdb, 0x96, 0x91, 0xc1, 0x0a,
	0x40, 0xe7, 0x59, 0xbf, 0x4b, 0x7a, 0x23, 0x6a, 0x5b, 0x86, 0x86, 0xbb, 0x50, 0xb6, 0xec, 0xa1,
	0x4d, 0x9f, 0x92, 0x3e, 0xe9, 0xf7, 0x0c, 0x5d, 0x00, 0x12, 0x87, 0x6d, 0x19, 0x59, 0x61, 0xff,
	0xd0, 0x3a, 0x21, 0x56, 0x6b, 0x28, 0xe2, 0x39, 0x2c, 0x43, 0x81, 0x8e, 0xfa, 0x12, 0xbc, 0x25,
	0x8c, 0xc1, 0xa8, 0xd3, 0xb1, 0x07, 0x03, 0x23, 0x2f, 0x8c, 0x6e, 0x8b, 0x9c, 0x8c, 0xa8, 0x6d,
	0x14, 0x9a, 0xff, 0x64, 0x61, 0x3b, 0x95, 0x80, 0xd6, 0x73, 0x82, 0x5f, 0x83, 0xd1, 0x63, 0xbc,
	0x35, 0x9f, 0x5f, 0x93, 0xc6, 0x07, 0xb7, 0xce, 0xc7, 0x16, 0xaa, 0x5b, 0xdb, 0x5d, 0x97, 0xc7,
	0x08, 0x1f, 0xc3, 0x76, 0x8f, 0xf1, 0x95, 0xc8, 0x19, 0xeb, 0x00, 0x62, 0xd5, 0x6e, 0x28, 0x2a,
	0x1e, 0x40, 0xa1, 0xc7, 0xb8, 0x94, 0xd0, 0xdb, 0xe0, 0x52, 0x22, 0xa3, 0x11, 0x1e, 0x42, 0x5e,
	0xe1, 0xf0, 0x4e, 0x55, 0xa8, 0xa5, 0x8a, 0x8b, 0x9f, 0x43, 0xa9, 0xc7, 0xb8, 0x12, 0x96, 0x0d,
	0x60, 0x94, 0xde, 0x75, 0xe1, 0xfc, 0x0a, 0x4a, 0xa9, 0x18, 0xe1, 0xbb, 0x6b, 0x80, 0x44, 0x9c,
	0x6a, 0x1b, 0xe6, 0x80, 0x5f, 0x42, 0x59, 0x91, 0x53, 0xeb, 0xbc, 0xfb, 0xa7, 0xc6, 0xea, 0x64,
	0xd4, 0xf9, 0x3d, 0xd6, 0xf0, 0x13, 0x00, 0x95, 0x28, 0x1f, 0xfc, 0xdd, 0x79, 0xab, 0xd7, 0x2d,
	0x5f, 0xd1, 0x17, 0x50, 0x58, 0x6a, 0x31, 0xde, 0x93, 0x91, 0x75, 0x65, 0xde, 0xc4, 0xb1, 0x5d,
	0x7d, 0x7d, 0x59, 0xd7, 0xde, 0x5c, 0xd6, 0xb5, 0xbf, 0x2f, 0xeb, 0xda, 0xef, 0x57, 0xf5, 0xcc,
	0x9b, 0xab, 0x7a, 0xe6, 0xcf, 0xab, 0x7a, 0xe6, 0x2c, 0x2f, 0x91, 0x9f, 0xfe, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x6c, 0x11, 0x25, 0xc5, 0x8c, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProcessorAPIClient is the client API for ProcessorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcessorAPIClient interface {
	// GetAllProcessors lists all processors on an endpoint
	GetAllProcessors(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Processors, error)
	GetProcessor(ctx context.Context, in *ProcessorID, opts ...grpc.CallOption) (*Processor, error)
	// GetRuns lists all runs on a processor
	GetRuns(ctx context.Context, in *ProcessorID, opts ...grpc.CallOption) (*Runs, error)
	// GetRun returns an individual run
	GetRun(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (*Run, error)
	// GetConfig gets the current configuration of a processor Run
	GetConfig(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (*Configuration, error)
	// Configure accepts configuration serialized to a []byte
	// It runs synchronously and returns an error if the configuration is rejected
	// It needs the Run ID to be unique and new (e.g. no existing run)
	// It will create a new Run with the specified configuration
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// returns a streaming view of the state of a given Run
	GetRunState(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (ProcessorAPI_GetRunStateClient, error)
	// GetRunData retrieves all of the data chunks associated with a Run
	GetRunData(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (*DataSpec, error)
	// Returns nothing on success, error if empty
	AddData(ctx context.Context, in *AddDataRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type processorAPIClient struct {
	cc *grpc.ClientConn
}

func NewProcessorAPIClient(cc *grpc.ClientConn) ProcessorAPIClient {
	return &processorAPIClient{cc}
}

func (c *processorAPIClient) GetAllProcessors(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Processors, error) {
	out := new(Processors)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/GetAllProcessors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorAPIClient) GetProcessor(ctx context.Context, in *ProcessorID, opts ...grpc.CallOption) (*Processor, error) {
	out := new(Processor)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/GetProcessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorAPIClient) GetRuns(ctx context.Context, in *ProcessorID, opts ...grpc.CallOption) (*Runs, error) {
	out := new(Runs)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/GetRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorAPIClient) GetRun(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/GetRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorAPIClient) GetConfig(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorAPIClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorAPIClient) GetRunState(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (ProcessorAPI_GetRunStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProcessorAPI_serviceDesc.Streams[0], "/api.ProcessorAPI/GetRunState", opts...)
	if err != nil {
		return nil, err
	}
	x := &processorAPIGetRunStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessorAPI_GetRunStateClient interface {
	Recv() (*StateUpdate, error)
	grpc.ClientStream
}

type processorAPIGetRunStateClient struct {
	grpc.ClientStream
}

func (x *processorAPIGetRunStateClient) Recv() (*StateUpdate, error) {
	m := new(StateUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processorAPIClient) GetRunData(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (*DataSpec, error) {
	out := new(DataSpec)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/GetRunData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorAPIClient) AddData(ctx context.Context, in *AddDataRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/AddData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessorAPIServer is the server API for ProcessorAPI service.
type ProcessorAPIServer interface {
	// GetAllProcessors lists all processors on an endpoint
	GetAllProcessors(context.Context, *types.Empty) (*Processors, error)
	GetProcessor(context.Context, *ProcessorID) (*Processor, error)
	// GetRuns lists all runs on a processor
	GetRuns(context.Context, *ProcessorID) (*Runs, error)
	// GetRun returns an individual run
	GetRun(context.Context, *IndividualRunID) (*Run, error)
	// GetConfig gets the current configuration of a processor Run
	GetConfig(context.Context, *IndividualRunID) (*Configuration, error)
	// Configure accepts configuration serialized to a []byte
	// It runs synchronously and returns an error if the configuration is rejected
	// It needs the Run ID to be unique and new (e.g. no existing run)
	// It will create a new Run with the specified configuration
	Configure(context.Context, *ConfigureRequest) (*types.Empty, error)
	// returns a streaming view of the state of a given Run
	GetRunState(*IndividualRunID, ProcessorAPI_GetRunStateServer) error
	// GetRunData retrieves all of the data chunks associated with a Run
	GetRunData(context.Context, *IndividualRunID) (*DataSpec, error)
	// Returns nothing on success, error if empty
	AddData(context.Context, *AddDataRequest) (*types.Empty, error)
}

// UnimplementedProcessorAPIServer can be embedded to have forward compatible implementations.
type UnimplementedProcessorAPIServer struct {
}

func (*UnimplementedProcessorAPIServer) GetAllProcessors(ctx context.Context, req *types.Empty) (*Processors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProcessors not implemented")
}
func (*UnimplementedProcessorAPIServer) GetProcessor(ctx context.Context, req *ProcessorID) (*Processor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessor not implemented")
}
func (*UnimplementedProcessorAPIServer) GetRuns(ctx context.Context, req *ProcessorID) (*Runs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuns not implemented")
}
func (*UnimplementedProcessorAPIServer) GetRun(ctx context.Context, req *IndividualRunID) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (*UnimplementedProcessorAPIServer) GetConfig(ctx context.Context, req *IndividualRunID) (*Configuration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedProcessorAPIServer) Configure(ctx context.Context, req *ConfigureRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedProcessorAPIServer) GetRunState(req *IndividualRunID, srv ProcessorAPI_GetRunStateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRunState not implemented")
}
func (*UnimplementedProcessorAPIServer) GetRunData(ctx context.Context, req *IndividualRunID) (*DataSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunData not implemented")
}
func (*UnimplementedProcessorAPIServer) AddData(ctx context.Context, req *AddDataRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddData not implemented")
}

func RegisterProcessorAPIServer(s *grpc.Server, srv ProcessorAPIServer) {
	s.RegisterService(&_ProcessorAPI_serviceDesc, srv)
}

func _ProcessorAPI_GetAllProcessors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).GetAllProcessors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/GetAllProcessors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).GetAllProcessors(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorAPI_GetProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).GetProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/GetProcessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).GetProcessor(ctx, req.(*ProcessorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorAPI_GetRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).GetRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/GetRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).GetRuns(ctx, req.(*ProcessorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorAPI_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndividualRunID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/GetRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).GetRun(ctx, req.(*IndividualRunID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorAPI_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndividualRunID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).GetConfig(ctx, req.(*IndividualRunID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorAPI_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorAPI_GetRunState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IndividualRunID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessorAPIServer).GetRunState(m, &processorAPIGetRunStateServer{stream})
}

type ProcessorAPI_GetRunStateServer interface {
	Send(*StateUpdate) error
	grpc.ServerStream
}

type processorAPIGetRunStateServer struct {
	grpc.ServerStream
}

func (x *processorAPIGetRunStateServer) Send(m *StateUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _ProcessorAPI_GetRunData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndividualRunID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).GetRunData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/GetRunData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).GetRunData(ctx, req.(*IndividualRunID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorAPI_AddData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).AddData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/AddData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).AddData(ctx, req.(*AddDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProcessorAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ProcessorAPI",
	HandlerType: (*ProcessorAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllProcessors",
			Handler:    _ProcessorAPI_GetAllProcessors_Handler,
		},
		{
			MethodName: "GetProcessor",
			Handler:    _ProcessorAPI_GetProcessor_Handler,
		},
		{
			MethodName: "GetRuns",
			Handler:    _ProcessorAPI_GetRuns_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _ProcessorAPI_GetRun_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ProcessorAPI_GetConfig_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _ProcessorAPI_Configure_Handler,
		},
		{
			MethodName: "GetRunData",
			Handler:    _ProcessorAPI_GetRunData_Handler,
		},
		{
			MethodName: "AddData",
			Handler:    _ProcessorAPI_AddData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRunState",
			Handler:       _ProcessorAPI_GetRunState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "processor.proto",
}

func (m *Processors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Processors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Processors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Processors) > 0 {
		for iNdEx := len(m.Processors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Processors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Runs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Runs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Runs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Runs) > 0 {
		for iNdEx := len(m.Runs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Runs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Processor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Processor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Processor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProcessor(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintProcessor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProcID) > 0 {
		i -= len(m.ProcID)
		copy(dAtA[i:], m.ProcID)
		i = encodeVarintProcessor(dAtA, i, uint64(len(m.ProcID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Configuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Configuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *ProcessorID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessorID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessorID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProcID) > 0 {
		i -= len(m.ProcID)
		copy(dAtA[i:], m.ProcID)
		i = encodeVarintProcessor(dAtA, i, uint64(len(m.ProcID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Run) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Run) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Run) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintProcessor(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RunID) > 0 {
		i -= len(m.RunID)
		copy(dAtA[i:], m.RunID)
		i = encodeVarintProcessor(dAtA, i, uint64(len(m.RunID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndividualRunID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndividualRunID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndividualRunID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunID) > 0 {
		i -= len(m.RunID)
		copy(dAtA[i:], m.RunID)
		i = encodeVarintProcessor(dAtA, i, uint64(len(m.RunID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProcID) > 0 {
		i -= len(m.ProcID)
		copy(dAtA[i:], m.ProcID)
		i = encodeVarintProcessor(dAtA, i, uint64(len(m.ProcID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutputChunk_ID) > 0 {
		i -= len(m.OutputChunk_ID)
		copy(dAtA[i:], m.OutputChunk_ID)
		i = encodeVarintProcessor(dAtA, i, uint64(len(m.OutputChunk_ID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintProcessor(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chunk_ID) > 0 {
		i -= len(m.Chunk_ID)
		copy(dAtA[i:], m.Chunk_ID)
		i = encodeVarintProcessor(dAtA, i, uint64(len(m.Chunk_ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Data_Raw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_Raw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Raw != nil {
		{
			size, err := m.Raw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Data_Fs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_Fs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Fs != nil {
		{
			size, err := m.Fs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DataSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Out) > 0 {
		for iNdEx := len(m.Out) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Out[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.In) > 0 {
		for iNdEx := len(m.In) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.In[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FilesystemReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilesystemReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilesystemReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintProcessor(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Driver) > 0 {
		i -= len(m.Driver)
		copy(dAtA[i:], m.Driver)
		i = encodeVarintProcessor(dAtA, i, uint64(len(m.Driver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewState != 0 {
		i = encodeVarintProcessor(dAtA, i, uint64(m.NewState))
		i--
		dAtA[i] = 0x10
	}
	if m.OldState != 0 {
		i = encodeVarintProcessor(dAtA, i, uint64(m.OldState))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProcessor(dAtA []byte, offset int, v uint64) int {
	offset -= sovProcessor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Processors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Processors) > 0 {
		for _, e := range m.Processors {
			l = e.Size()
			n += 1 + l + sovProcessor(uint64(l))
		}
	}
	return n
}

func (m *Runs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Runs) > 0 {
		for _, e := range m.Runs {
			l = e.Size()
			n += 1 + l + sovProcessor(uint64(l))
		}
	}
	return n
}

func (m *Processor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProcID)
	if l > 0 {
		n += 1 + l + sovProcessor(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProcessor(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProcessor(uint64(l))
	}
	return n
}

func (m *Configuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovProcessor(uint64(l))
	}
	return n
}

func (m *ProcessorID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProcID)
	if l > 0 {
		n += 1 + l + sovProcessor(uint64(l))
	}
	return n
}

func (m *AddDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovProcessor(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovProcessor(uint64(l))
	}
	return n
}

func (m *ConfigureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovProcessor(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovProcessor(uint64(l))
	}
	return n
}

func (m *Run) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RunID)
	if l > 0 {
		n += 1 + l + sovProcessor(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovProcessor(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovProcessor(uint64(m.State))
	}
	return n
}

func (m *IndividualRunID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProcID)
	if l > 0 {
		n += 1 + l + sovProcessor(uint64(l))
	}
	l = len(m.RunID)
	if l > 0 {
		n += 1 + l + sovProcessor(uint64(l))
	}
	return n
}

func (m *Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chunk_ID)
	if l > 0 {
		n += 1 + l + sovProcessor(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovProcessor(uint64(m.Type))
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	l = len(m.OutputChunk_ID)
	if l > 0 {
		n += 1 + l + sovProcessor(uint64(l))
	}
	return n
}

func (m *Data_Raw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Raw != nil {
		l = m.Raw.Size()
		n += 1 + l + sovProcessor(uint64(l))
	}
	return n
}
func (m *Data_Fs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fs != nil {
		l = m.Fs.Size()
		n += 1 + l + sovProcessor(uint64(l))
	}
	return n
}
func (m *DataSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.In) > 0 {
		for _, e := range m.In {
			l = e.Size()
			n += 1 + l + sovProcessor(uint64(l))
		}
	}
	if len(m.Out) > 0 {
		for _, e := range m.Out {
			l = e.Size()
			n += 1 + l + sovProcessor(uint64(l))
		}
	}
	return n
}

func (m *FilesystemReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Driver)
	if l > 0 {
		n += 1 + l + sovProcessor(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovProcessor(uint64(l))
	}
	return n
}

func (m *StateUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OldState != 0 {
		n += 1 + sovProcessor(uint64(m.OldState))
	}
	if m.NewState != 0 {
		n += 1 + sovProcessor(uint64(m.NewState))
	}
	return n
}

func sovProcessor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProcessor(x uint64) (n int) {
	return sovProcessor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Processors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Processors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Processors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Processors = append(m.Processors, Processor{})
			if err := m.Processors[len(m.Processors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Runs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Runs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Runs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runs = append(m.Runs, Run{})
			if err := m.Runs[len(m.Runs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Processor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Processor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Processor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Configuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &types.Any{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessorID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessorID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessorID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &IndividualRunID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &IndividualRunID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &types.Any{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Run) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Run: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Run: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &types.Any{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProcessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndividualRunID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndividualRunID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndividualRunID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk_ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunk_ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Any{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Data_Raw{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FilesystemReference{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Data_Fs{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputChunk_ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputChunk_ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = append(m.In, &Data{})
			if err := m.In[len(m.In)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Out", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Out = append(m.Out, &Data{})
			if err := m.Out[len(m.Out)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilesystemReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilesystemReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilesystemReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Driver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldState", wireType)
			}
			m.OldState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldState |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewState", wireType)
			}
			m.NewState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewState |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProcessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProcessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProcessor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProcessor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProcessor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProcessor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProcessor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProcessor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProcessor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProcessor = fmt.Errorf("proto: unexpected end of group")
)
