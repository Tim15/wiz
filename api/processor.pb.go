// Code generated by protoc-gen-go. DO NOT EDIT.
// source: processor.proto

//option go_package = "github.com/alexkreidler/api";

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Data is either raw data, in JSON, or a filesystem reference
type DataType int32

const (
	DataType_RAW_JSON       DataType = 0
	DataType_FILESYSTEM_REF DataType = 1
)

var DataType_name = map[int32]string{
	0: "RAW_JSON",
	1: "FILESYSTEM_REF",
}

var DataType_value = map[string]int32{
	"RAW_JSON":       0,
	"FILESYSTEM_REF": 1,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{0}
}

type State int32

const (
	State_UNINITIALIZED State = 0
	State_CONFIGURED    State = 1
	State_DETERMINING   State = 2
	State_DETERMINED    State = 3
	State_VALIDATING    State = 4
	State_RUNNING       State = 5
	State_SUCCESS       State = 6
	State_FAILURE       State = 7
)

var State_name = map[int32]string{
	0: "UNINITIALIZED",
	1: "CONFIGURED",
	2: "DETERMINING",
	3: "DETERMINED",
	4: "VALIDATING",
	5: "RUNNING",
	6: "SUCCESS",
	7: "FAILURE",
}

var State_value = map[string]int32{
	"UNINITIALIZED": 0,
	"CONFIGURED":    1,
	"DETERMINING":   2,
	"DETERMINED":    3,
	"VALIDATING":    4,
	"RUNNING":       5,
	"SUCCESS":       6,
	"FAILURE":       7,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{1}
}

type Processors struct {
	Processors           []*Processor `protobuf:"bytes,1,rep,name=processors,proto3" json:"processors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Processors) Reset()         { *m = Processors{} }
func (m *Processors) String() string { return proto.CompactTextString(m) }
func (*Processors) ProtoMessage()    {}
func (*Processors) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{0}
}

func (m *Processors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Processors.Unmarshal(m, b)
}
func (m *Processors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Processors.Marshal(b, m, deterministic)
}
func (m *Processors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Processors.Merge(m, src)
}
func (m *Processors) XXX_Size() int {
	return xxx_messageInfo_Processors.Size(m)
}
func (m *Processors) XXX_DiscardUnknown() {
	xxx_messageInfo_Processors.DiscardUnknown(m)
}

var xxx_messageInfo_Processors proto.InternalMessageInfo

func (m *Processors) GetProcessors() []*Processor {
	if m != nil {
		return m.Processors
	}
	return nil
}

type Processor struct {
	// human readable name
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Processor) Reset()         { *m = Processor{} }
func (m *Processor) String() string { return proto.CompactTextString(m) }
func (*Processor) ProtoMessage()    {}
func (*Processor) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{1}
}

func (m *Processor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Processor.Unmarshal(m, b)
}
func (m *Processor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Processor.Marshal(b, m, deterministic)
}
func (m *Processor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Processor.Merge(m, src)
}
func (m *Processor) XXX_Size() int {
	return xxx_messageInfo_Processor.Size(m)
}
func (m *Processor) XXX_DiscardUnknown() {
	xxx_messageInfo_Processor.DiscardUnknown(m)
}

var xxx_messageInfo_Processor proto.InternalMessageInfo

func (m *Processor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Processor) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type Processor_ID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Processor_ID) Reset()         { *m = Processor_ID{} }
func (m *Processor_ID) String() string { return proto.CompactTextString(m) }
func (*Processor_ID) ProtoMessage()    {}
func (*Processor_ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{1, 0}
}

func (m *Processor_ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Processor_ID.Unmarshal(m, b)
}
func (m *Processor_ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Processor_ID.Marshal(b, m, deterministic)
}
func (m *Processor_ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Processor_ID.Merge(m, src)
}
func (m *Processor_ID) XXX_Size() int {
	return xxx_messageInfo_Processor_ID.Size(m)
}
func (m *Processor_ID) XXX_DiscardUnknown() {
	xxx_messageInfo_Processor_ID.DiscardUnknown(m)
}

var xxx_messageInfo_Processor_ID proto.InternalMessageInfo

func (m *Processor_ID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Configuration struct {
	Config               *any.Any `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Configuration) Reset()         { *m = Configuration{} }
func (m *Configuration) String() string { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()    {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{2}
}

func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Configuration.Unmarshal(m, b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
}
func (m *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(m, src)
}
func (m *Configuration) XXX_Size() int {
	return xxx_messageInfo_Configuration.Size(m)
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func (m *Configuration) GetConfig() *any.Any {
	if m != nil {
		return m.Config
	}
	return nil
}

type AddDataRequest struct {
	Id                   *IndividualRunID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data                 *Data            `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AddDataRequest) Reset()         { *m = AddDataRequest{} }
func (m *AddDataRequest) String() string { return proto.CompactTextString(m) }
func (*AddDataRequest) ProtoMessage()    {}
func (*AddDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{3}
}

func (m *AddDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddDataRequest.Unmarshal(m, b)
}
func (m *AddDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddDataRequest.Marshal(b, m, deterministic)
}
func (m *AddDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDataRequest.Merge(m, src)
}
func (m *AddDataRequest) XXX_Size() int {
	return xxx_messageInfo_AddDataRequest.Size(m)
}
func (m *AddDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDataRequest proto.InternalMessageInfo

func (m *AddDataRequest) GetId() *IndividualRunID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AddDataRequest) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// ConfigureRequest requires a processor ID, Run ID, and the configuration to send
type ConfigureRequest struct {
	// Processor.ID processorID = 1;
	// string runID = 2;
	RunID                *IndividualRunID `protobuf:"bytes,1,opt,name=runID,proto3" json:"runID,omitempty"`
	Config               *Configuration   `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ConfigureRequest) Reset()         { *m = ConfigureRequest{} }
func (m *ConfigureRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigureRequest) ProtoMessage()    {}
func (*ConfigureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{4}
}

func (m *ConfigureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigureRequest.Unmarshal(m, b)
}
func (m *ConfigureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigureRequest.Marshal(b, m, deterministic)
}
func (m *ConfigureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureRequest.Merge(m, src)
}
func (m *ConfigureRequest) XXX_Size() int {
	return xxx_messageInfo_ConfigureRequest.Size(m)
}
func (m *ConfigureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureRequest proto.InternalMessageInfo

func (m *ConfigureRequest) GetRunID() *IndividualRunID {
	if m != nil {
		return m.RunID
	}
	return nil
}

func (m *ConfigureRequest) GetConfig() *Configuration {
	if m != nil {
		return m.Config
	}
	return nil
}

// A run is globally unique, associated with configuration, and has a state
type Run struct {
	RunID                string         `protobuf:"bytes,1,opt,name=runID,proto3" json:"runID,omitempty"`
	Config               *Configuration `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	State                State          `protobuf:"varint,3,opt,name=state,proto3,enum=api.State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Run) Reset()         { *m = Run{} }
func (m *Run) String() string { return proto.CompactTextString(m) }
func (*Run) ProtoMessage()    {}
func (*Run) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{5}
}

func (m *Run) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Run.Unmarshal(m, b)
}
func (m *Run) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Run.Marshal(b, m, deterministic)
}
func (m *Run) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Run.Merge(m, src)
}
func (m *Run) XXX_Size() int {
	return xxx_messageInfo_Run.Size(m)
}
func (m *Run) XXX_DiscardUnknown() {
	xxx_messageInfo_Run.DiscardUnknown(m)
}

var xxx_messageInfo_Run proto.InternalMessageInfo

func (m *Run) GetRunID() string {
	if m != nil {
		return m.RunID
	}
	return ""
}

func (m *Run) GetConfig() *Configuration {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Run) GetState() State {
	if m != nil {
		return m.State
	}
	return State_UNINITIALIZED
}

// IndividualRunRequest identifies one specific run on a processor
type IndividualRunID struct {
	ProcessorID          *Processor_ID `protobuf:"bytes,1,opt,name=processorID,proto3" json:"processorID,omitempty"`
	RunID                string        `protobuf:"bytes,2,opt,name=runID,proto3" json:"runID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *IndividualRunID) Reset()         { *m = IndividualRunID{} }
func (m *IndividualRunID) String() string { return proto.CompactTextString(m) }
func (*IndividualRunID) ProtoMessage()    {}
func (*IndividualRunID) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{6}
}

func (m *IndividualRunID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndividualRunID.Unmarshal(m, b)
}
func (m *IndividualRunID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndividualRunID.Marshal(b, m, deterministic)
}
func (m *IndividualRunID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndividualRunID.Merge(m, src)
}
func (m *IndividualRunID) XXX_Size() int {
	return xxx_messageInfo_IndividualRunID.Size(m)
}
func (m *IndividualRunID) XXX_DiscardUnknown() {
	xxx_messageInfo_IndividualRunID.DiscardUnknown(m)
}

var xxx_messageInfo_IndividualRunID proto.InternalMessageInfo

func (m *IndividualRunID) GetProcessorID() *Processor_ID {
	if m != nil {
		return m.ProcessorID
	}
	return nil
}

func (m *IndividualRunID) GetRunID() string {
	if m != nil {
		return m.RunID
	}
	return ""
}

type Data struct {
	ChunkId string   `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Type    DataType `protobuf:"varint,2,opt,name=type,proto3,enum=api.DataType" json:"type,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Data_Raw
	//	*Data_Fs
	Data                 isData_Data `protobuf_oneof:"data"`
	OutputChunkId        string      `protobuf:"bytes,5,opt,name=output_chunk_id,json=outputChunkId,proto3" json:"output_chunk_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{7}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetChunkId() string {
	if m != nil {
		return m.ChunkId
	}
	return ""
}

func (m *Data) GetType() DataType {
	if m != nil {
		return m.Type
	}
	return DataType_RAW_JSON
}

type isData_Data interface {
	isData_Data()
}

type Data_Raw struct {
	Raw *any.Any `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Data_Fs struct {
	Fs *FilesystemReference `protobuf:"bytes,4,opt,name=fs,proto3,oneof"`
}

func (*Data_Raw) isData_Data() {}

func (*Data_Fs) isData_Data() {}

func (m *Data) GetData() isData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Data) GetRaw() *any.Any {
	if x, ok := m.GetData().(*Data_Raw); ok {
		return x.Raw
	}
	return nil
}

func (m *Data) GetFs() *FilesystemReference {
	if x, ok := m.GetData().(*Data_Fs); ok {
		return x.Fs
	}
	return nil
}

func (m *Data) GetOutputChunkId() string {
	if m != nil {
		return m.OutputChunkId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Data) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Data_Raw)(nil),
		(*Data_Fs)(nil),
	}
}

// DataSpec represents all the chunks that the processor has both recieved and written
type DataSpec struct {
	In                   []*Data  `protobuf:"bytes,1,rep,name=in,proto3" json:"in,omitempty"`
	Out                  []*Data  `protobuf:"bytes,2,rep,name=out,proto3" json:"out,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataSpec) Reset()         { *m = DataSpec{} }
func (m *DataSpec) String() string { return proto.CompactTextString(m) }
func (*DataSpec) ProtoMessage()    {}
func (*DataSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{8}
}

func (m *DataSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataSpec.Unmarshal(m, b)
}
func (m *DataSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataSpec.Marshal(b, m, deterministic)
}
func (m *DataSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataSpec.Merge(m, src)
}
func (m *DataSpec) XXX_Size() int {
	return xxx_messageInfo_DataSpec.Size(m)
}
func (m *DataSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DataSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DataSpec proto.InternalMessageInfo

func (m *DataSpec) GetIn() []*Data {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *DataSpec) GetOut() []*Data {
	if m != nil {
		return m.Out
	}
	return nil
}

type FilesystemReference struct {
	Driver               string   `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Location             string   `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilesystemReference) Reset()         { *m = FilesystemReference{} }
func (m *FilesystemReference) String() string { return proto.CompactTextString(m) }
func (*FilesystemReference) ProtoMessage()    {}
func (*FilesystemReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{9}
}

func (m *FilesystemReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilesystemReference.Unmarshal(m, b)
}
func (m *FilesystemReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilesystemReference.Marshal(b, m, deterministic)
}
func (m *FilesystemReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilesystemReference.Merge(m, src)
}
func (m *FilesystemReference) XXX_Size() int {
	return xxx_messageInfo_FilesystemReference.Size(m)
}
func (m *FilesystemReference) XXX_DiscardUnknown() {
	xxx_messageInfo_FilesystemReference.DiscardUnknown(m)
}

var xxx_messageInfo_FilesystemReference proto.InternalMessageInfo

func (m *FilesystemReference) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *FilesystemReference) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

type StateUpdate struct {
	OldState             State    `protobuf:"varint,1,opt,name=oldState,proto3,enum=api.State" json:"oldState,omitempty"`
	NewState             State    `protobuf:"varint,2,opt,name=newState,proto3,enum=api.State" json:"newState,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateUpdate) Reset()         { *m = StateUpdate{} }
func (m *StateUpdate) String() string { return proto.CompactTextString(m) }
func (*StateUpdate) ProtoMessage()    {}
func (*StateUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{10}
}

func (m *StateUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateUpdate.Unmarshal(m, b)
}
func (m *StateUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateUpdate.Marshal(b, m, deterministic)
}
func (m *StateUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateUpdate.Merge(m, src)
}
func (m *StateUpdate) XXX_Size() int {
	return xxx_messageInfo_StateUpdate.Size(m)
}
func (m *StateUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_StateUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_StateUpdate proto.InternalMessageInfo

func (m *StateUpdate) GetOldState() State {
	if m != nil {
		return m.OldState
	}
	return State_UNINITIALIZED
}

func (m *StateUpdate) GetNewState() State {
	if m != nil {
		return m.NewState
	}
	return State_UNINITIALIZED
}

func init() {
	proto.RegisterEnum("api.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("api.State", State_name, State_value)
	proto.RegisterType((*Processors)(nil), "api.Processors")
	proto.RegisterType((*Processor)(nil), "api.Processor")
	proto.RegisterType((*Processor_ID)(nil), "api.Processor.ID")
	proto.RegisterType((*Configuration)(nil), "api.Configuration")
	proto.RegisterType((*AddDataRequest)(nil), "api.AddDataRequest")
	proto.RegisterType((*ConfigureRequest)(nil), "api.ConfigureRequest")
	proto.RegisterType((*Run)(nil), "api.Run")
	proto.RegisterType((*IndividualRunID)(nil), "api.IndividualRunID")
	proto.RegisterType((*Data)(nil), "api.Data")
	proto.RegisterType((*DataSpec)(nil), "api.DataSpec")
	proto.RegisterType((*FilesystemReference)(nil), "api.FilesystemReference")
	proto.RegisterType((*StateUpdate)(nil), "api.StateUpdate")
}

func init() { proto.RegisterFile("processor.proto", fileDescriptor_6783724e039e1aa6) }

var fileDescriptor_6783724e039e1aa6 = []byte{
	// 830 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x6d, 0x6f, 0xdb, 0x54,
	0x14, 0x6e, 0x9c, 0xf7, 0x93, 0x36, 0xf1, 0xce, 0xca, 0x94, 0x7a, 0x42, 0x2a, 0x16, 0xaa, 0x4a,
	0x34, 0x65, 0x2c, 0x13, 0x42, 0xe2, 0xe5, 0x83, 0x17, 0x3b, 0xd9, 0x45, 0x5d, 0x3a, 0x5d, 0x27,
	0x20, 0x10, 0xa8, 0xf2, 0xe2, 0x9b, 0x62, 0x48, 0x6d, 0x63, 0x5f, 0x77, 0xca, 0x57, 0x7e, 0x1e,
	0xbf, 0x83, 0x1f, 0x82, 0xee, 0xbd, 0xb1, 0xf3, 0xd2, 0x30, 0x09, 0xbe, 0xf9, 0x9c, 0xe7, 0xb9,
	0xc7, 0xcf, 0x79, 0x85, 0x4e, 0x9c, 0x44, 0x73, 0x96, 0xa6, 0x51, 0xd2, 0x8f, 0x93, 0x88, 0x47,
	0x58, 0xf6, 0xe2, 0xc0, 0x38, 0xbb, 0x8d, 0xa2, 0xdb, 0x25, 0x7b, 0x2e, 0x5d, 0xef, 0xb2, 0xc5,
	0x73, 0x2f, 0x5c, 0x29, 0xdc, 0x78, 0xba, 0x0f, 0xb1, 0xbb, 0x98, 0xaf, 0x41, 0xf3, 0x1b, 0x80,
	0xb7, 0x79, 0xbc, 0x14, 0xfb, 0x00, 0x45, 0xf4, 0xb4, 0x5b, 0x3a, 0x2f, 0x5f, 0xb6, 0x06, 0xed,
	0xbe, 0x17, 0x07, 0xfd, 0x82, 0x44, 0xb7, 0x18, 0xe6, 0x35, 0x34, 0x0b, 0x00, 0x11, 0x2a, 0xa1,
	0x77, 0xc7, 0xba, 0xda, 0x79, 0xe9, 0xb2, 0x49, 0xe5, 0x37, 0x76, 0xa1, 0x7e, 0xcf, 0x92, 0x34,
	0x88, 0xc2, 0x6e, 0x59, 0xba, 0x73, 0xd3, 0x38, 0x05, 0x8d, 0xd8, 0xd8, 0x06, 0x2d, 0xf0, 0xbb,
	0x25, 0x09, 0x69, 0x81, 0x6f, 0x7e, 0x0b, 0x27, 0xc3, 0x28, 0x5c, 0x04, 0xb7, 0x59, 0xe2, 0xf1,
	0x20, 0x0a, 0xf1, 0x19, 0xd4, 0xe6, 0xd2, 0x21, 0xdf, 0xb7, 0x06, 0xa7, 0x7d, 0x95, 0x4d, 0x3f,
	0xcf, 0xa6, 0x6f, 0x85, 0x2b, 0xba, 0xe6, 0x98, 0x33, 0x68, 0x5b, 0xbe, 0x6f, 0x7b, 0xdc, 0xa3,
	0xec, 0x8f, 0x8c, 0xa5, 0x1c, 0x3f, 0x2d, 0x7e, 0x20, 0xde, 0x8a, 0x4c, 0x48, 0xe8, 0x07, 0xf7,
	0x81, 0x9f, 0x79, 0x4b, 0x9a, 0x85, 0xc4, 0x16, 0xbf, 0xc5, 0x8f, 0xa1, 0xe2, 0x7b, 0xdc, 0x93,
	0xd2, 0x5b, 0x83, 0xa6, 0xe4, 0xc9, 0x28, 0xd2, 0x6d, 0xfe, 0x06, 0x7a, 0xae, 0x8a, 0xe5, 0x81,
	0x7b, 0x50, 0x4d, 0xc4, 0xfb, 0x0f, 0xc6, 0x56, 0x14, 0xec, 0x15, 0x49, 0xa8, 0x1f, 0xa0, 0x24,
	0xef, 0x24, 0x5a, 0xa4, 0x10, 0x40, 0x99, 0x66, 0x21, 0x9e, 0x6e, 0x87, 0x6f, 0xfe, 0x8f, 0x40,
	0x78, 0x0e, 0xd5, 0x94, 0x7b, 0x9c, 0xc9, 0xc2, 0xb5, 0x07, 0x20, 0xa9, 0xae, 0xf0, 0x50, 0x05,
	0x98, 0x3f, 0x43, 0x67, 0x4f, 0x30, 0xbe, 0x84, 0x56, 0xd1, 0xde, 0x22, 0xb7, 0x47, 0xbb, 0x13,
	0xd0, 0x27, 0x36, 0xdd, 0x66, 0x6d, 0xb4, 0x6a, 0x5b, 0x5a, 0xcd, 0xbf, 0x4a, 0x50, 0x11, 0x35,
	0xc4, 0x33, 0x68, 0xcc, 0x7f, 0xcd, 0xc2, 0xdf, 0x6f, 0x8a, 0x4e, 0xd7, 0xa5, 0x4d, 0x7c, 0xfc,
	0x04, 0x2a, 0x7c, 0x15, 0xab, 0x91, 0x69, 0x0f, 0x4e, 0x8a, 0xba, 0x4f, 0x57, 0x31, 0xa3, 0x12,
	0xc2, 0x4b, 0x28, 0x27, 0xde, 0xfb, 0x0f, 0x75, 0xff, 0xf5, 0x11, 0x15, 0x14, 0xec, 0x81, 0xb6,
	0x48, 0xbb, 0x15, 0x49, 0xec, 0xca, 0x50, 0xa3, 0x60, 0xc9, 0xd2, 0x55, 0xca, 0xd9, 0x1d, 0x65,
	0x0b, 0x96, 0xb0, 0x70, 0xce, 0x5e, 0x1f, 0x51, 0x6d, 0x91, 0xe2, 0x05, 0x74, 0xa2, 0x8c, 0xc7,
	0x19, 0xbf, 0x29, 0xa4, 0x55, 0xa5, 0xb4, 0x13, 0xe5, 0x1e, 0x2a, 0x81, 0xaf, 0x6a, 0x6a, 0x30,
	0xcc, 0x57, 0xd0, 0x10, 0xba, 0xdc, 0x98, 0xcd, 0xf1, 0x0c, 0xb4, 0x20, 0x5c, 0x2f, 0xc7, 0xd6,
	0xa8, 0x68, 0x41, 0x88, 0x4f, 0xa1, 0x1c, 0x65, 0xbc, 0xab, 0xed, 0x63, 0xc2, 0x6b, 0x12, 0x78,
	0x7c, 0x40, 0x10, 0x3e, 0x81, 0x9a, 0x9f, 0x04, 0xf7, 0x2c, 0x59, 0x17, 0x67, 0x6d, 0xa1, 0x01,
	0x8d, 0x65, 0x34, 0x97, 0x3d, 0x5d, 0x17, 0xb6, 0xb0, 0xcd, 0x5f, 0xa0, 0x25, 0x3b, 0x39, 0x8b,
	0x7d, 0x8f, 0x33, 0xbc, 0x80, 0x46, 0xb4, 0xf4, 0xa5, 0x47, 0x06, 0xd9, 0xed, 0x76, 0x81, 0x09,
	0x5e, 0xc8, 0xde, 0x2b, 0x9e, 0xf6, 0x90, 0x97, 0x63, 0xbd, 0x67, 0x2a, 0x5b, 0xd1, 0x05, 0x3c,
	0x86, 0x06, 0xb5, 0x7e, 0xb8, 0xf9, 0xce, 0xbd, 0x9e, 0xe8, 0x47, 0x88, 0xd0, 0x1e, 0x91, 0x2b,
	0xc7, 0xfd, 0xd1, 0x9d, 0x3a, 0x6f, 0x6e, 0xa8, 0x33, 0xd2, 0x4b, 0xbd, 0x3f, 0x4b, 0x50, 0x55,
	0xf1, 0x1f, 0xc1, 0xc9, 0x6c, 0x42, 0x26, 0x64, 0x4a, 0xac, 0x2b, 0xf2, 0x93, 0x63, 0xeb, 0x47,
	0xd8, 0x06, 0x18, 0x5e, 0x4f, 0x46, 0x64, 0x3c, 0xa3, 0x8e, 0xad, 0x97, 0xb0, 0x03, 0x2d, 0xdb,
	0x99, 0x3a, 0xf4, 0x0d, 0x99, 0x90, 0xc9, 0x58, 0xd7, 0x04, 0x21, 0x77, 0x38, 0xb6, 0x5e, 0x16,
	0xf6, 0xf7, 0xd6, 0x15, 0xb1, 0xad, 0xa9, 0xc0, 0x2b, 0xd8, 0x82, 0x3a, 0x9d, 0x4d, 0x24, 0xb9,
	0x2a, 0x0c, 0x77, 0x36, 0x1c, 0x3a, 0xae, 0xab, 0xd7, 0x84, 0x31, 0xb2, 0xc8, 0xd5, 0x8c, 0x3a,
	0x7a, 0x7d, 0xf0, 0x77, 0x19, 0x8e, 0x8b, 0x09, 0xb5, 0xde, 0x12, 0xfc, 0x1a, 0xf4, 0x31, 0xe3,
	0xd6, 0x72, 0xb9, 0x75, 0xde, 0x9e, 0x3c, 0x18, 0x1f, 0x47, 0x9c, 0x42, 0xa3, 0xb3, 0x3b, 0xe0,
	0x29, 0xbe, 0x80, 0xe3, 0x31, 0xe3, 0x9b, 0xd3, 0xf6, 0x70, 0x03, 0x8c, 0xbd, 0xb3, 0x88, 0x17,
	0x50, 0x1f, 0x33, 0x4e, 0xb3, 0x30, 0x3d, 0xc4, 0x6e, 0x48, 0x97, 0x58, 0xec, 0x01, 0xd4, 0x14,
	0x0f, 0x0f, 0x9e, 0x0c, 0xe3, 0xc0, 0x4a, 0xe3, 0x17, 0xd0, 0x1c, 0x33, 0xae, 0x7c, 0xff, 0xe1,
	0xd9, 0x57, 0xd0, 0x2c, 0xce, 0x16, 0x7e, 0xb4, 0x43, 0xc8, 0xcf, 0x98, 0xf1, 0x2f, 0x25, 0xc1,
	0x2f, 0xa1, 0xa5, 0x64, 0xaa, 0xce, 0x1e, 0xfe, 0xa9, 0xbe, 0x99, 0x1e, 0x35, 0x89, 0x9f, 0x97,
	0xf0, 0x05, 0x80, 0x7a, 0x28, 0x77, 0xff, 0xf0, 0xbb, 0xcd, 0xa2, 0xcb, 0x85, 0xfa, 0x0c, 0xea,
	0xeb, 0xab, 0x8d, 0x8f, 0x25, 0xb2, 0x7b, 0xc3, 0x8d, 0xcd, 0x22, 0xbd, 0xab, 0x49, 0x99, 0x2f,
	0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x68, 0x50, 0x70, 0x0f, 0x05, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProcessorAPIClient is the client API for ProcessorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcessorAPIClient interface {
	// GetAllProcessors lists all processors on an endpoint
	GetAllProcessors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Processors, error)
	GetProcessor(ctx context.Context, in *Processor_ID, opts ...grpc.CallOption) (*Processor, error)
	// GetRuns lists all runs on a processor
	GetRuns(ctx context.Context, in *Processor_ID, opts ...grpc.CallOption) (*Run, error)
	// GetRun returns an individual run
	GetRun(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (*Configuration, error)
	// GetConfig gets the current configuration of a processor Run
	GetConfig(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (*Configuration, error)
	// Configure accepts configuration serialized to a []byte
	// It runs synchronously and returns an error if the configuration is rejected
	// It needs the Run ID to be unique and new (e.g. no existing run)
	// It will create a new Run with the specified configuration
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// returns a streaming view of the state of a given Run
	GetRunState(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (ProcessorAPI_GetRunStateClient, error)
	// GetRunData retrieves all of the data chunks associated with a Run
	GetRunData(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (*DataSpec, error)
	AddData(ctx context.Context, in *AddDataRequest, opts ...grpc.CallOption) (*Data, error)
}

type processorAPIClient struct {
	cc *grpc.ClientConn
}

func NewProcessorAPIClient(cc *grpc.ClientConn) ProcessorAPIClient {
	return &processorAPIClient{cc}
}

func (c *processorAPIClient) GetAllProcessors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Processors, error) {
	out := new(Processors)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/GetAllProcessors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorAPIClient) GetProcessor(ctx context.Context, in *Processor_ID, opts ...grpc.CallOption) (*Processor, error) {
	out := new(Processor)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/GetProcessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorAPIClient) GetRuns(ctx context.Context, in *Processor_ID, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/GetRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorAPIClient) GetRun(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/GetRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorAPIClient) GetConfig(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorAPIClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorAPIClient) GetRunState(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (ProcessorAPI_GetRunStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProcessorAPI_serviceDesc.Streams[0], "/api.ProcessorAPI/GetRunState", opts...)
	if err != nil {
		return nil, err
	}
	x := &processorAPIGetRunStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessorAPI_GetRunStateClient interface {
	Recv() (*StateUpdate, error)
	grpc.ClientStream
}

type processorAPIGetRunStateClient struct {
	grpc.ClientStream
}

func (x *processorAPIGetRunStateClient) Recv() (*StateUpdate, error) {
	m := new(StateUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processorAPIClient) GetRunData(ctx context.Context, in *IndividualRunID, opts ...grpc.CallOption) (*DataSpec, error) {
	out := new(DataSpec)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/GetRunData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorAPIClient) AddData(ctx context.Context, in *AddDataRequest, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/api.ProcessorAPI/AddData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessorAPIServer is the server API for ProcessorAPI service.
type ProcessorAPIServer interface {
	// GetAllProcessors lists all processors on an endpoint
	GetAllProcessors(context.Context, *empty.Empty) (*Processors, error)
	GetProcessor(context.Context, *Processor_ID) (*Processor, error)
	// GetRuns lists all runs on a processor
	GetRuns(context.Context, *Processor_ID) (*Run, error)
	// GetRun returns an individual run
	GetRun(context.Context, *IndividualRunID) (*Configuration, error)
	// GetConfig gets the current configuration of a processor Run
	GetConfig(context.Context, *IndividualRunID) (*Configuration, error)
	// Configure accepts configuration serialized to a []byte
	// It runs synchronously and returns an error if the configuration is rejected
	// It needs the Run ID to be unique and new (e.g. no existing run)
	// It will create a new Run with the specified configuration
	Configure(context.Context, *ConfigureRequest) (*empty.Empty, error)
	// returns a streaming view of the state of a given Run
	GetRunState(*IndividualRunID, ProcessorAPI_GetRunStateServer) error
	// GetRunData retrieves all of the data chunks associated with a Run
	GetRunData(context.Context, *IndividualRunID) (*DataSpec, error)
	AddData(context.Context, *AddDataRequest) (*Data, error)
}

// UnimplementedProcessorAPIServer can be embedded to have forward compatible implementations.
type UnimplementedProcessorAPIServer struct {
}

func (*UnimplementedProcessorAPIServer) GetAllProcessors(ctx context.Context, req *empty.Empty) (*Processors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProcessors not implemented")
}
func (*UnimplementedProcessorAPIServer) GetProcessor(ctx context.Context, req *Processor_ID) (*Processor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessor not implemented")
}
func (*UnimplementedProcessorAPIServer) GetRuns(ctx context.Context, req *Processor_ID) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuns not implemented")
}
func (*UnimplementedProcessorAPIServer) GetRun(ctx context.Context, req *IndividualRunID) (*Configuration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (*UnimplementedProcessorAPIServer) GetConfig(ctx context.Context, req *IndividualRunID) (*Configuration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedProcessorAPIServer) Configure(ctx context.Context, req *ConfigureRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedProcessorAPIServer) GetRunState(req *IndividualRunID, srv ProcessorAPI_GetRunStateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRunState not implemented")
}
func (*UnimplementedProcessorAPIServer) GetRunData(ctx context.Context, req *IndividualRunID) (*DataSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunData not implemented")
}
func (*UnimplementedProcessorAPIServer) AddData(ctx context.Context, req *AddDataRequest) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddData not implemented")
}

func RegisterProcessorAPIServer(s *grpc.Server, srv ProcessorAPIServer) {
	s.RegisterService(&_ProcessorAPI_serviceDesc, srv)
}

func _ProcessorAPI_GetAllProcessors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).GetAllProcessors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/GetAllProcessors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).GetAllProcessors(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorAPI_GetProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Processor_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).GetProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/GetProcessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).GetProcessor(ctx, req.(*Processor_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorAPI_GetRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Processor_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).GetRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/GetRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).GetRuns(ctx, req.(*Processor_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorAPI_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndividualRunID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/GetRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).GetRun(ctx, req.(*IndividualRunID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorAPI_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndividualRunID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).GetConfig(ctx, req.(*IndividualRunID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorAPI_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorAPI_GetRunState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IndividualRunID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessorAPIServer).GetRunState(m, &processorAPIGetRunStateServer{stream})
}

type ProcessorAPI_GetRunStateServer interface {
	Send(*StateUpdate) error
	grpc.ServerStream
}

type processorAPIGetRunStateServer struct {
	grpc.ServerStream
}

func (x *processorAPIGetRunStateServer) Send(m *StateUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _ProcessorAPI_GetRunData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndividualRunID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).GetRunData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/GetRunData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).GetRunData(ctx, req.(*IndividualRunID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorAPI_AddData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorAPIServer).AddData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProcessorAPI/AddData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorAPIServer).AddData(ctx, req.(*AddDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProcessorAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ProcessorAPI",
	HandlerType: (*ProcessorAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllProcessors",
			Handler:    _ProcessorAPI_GetAllProcessors_Handler,
		},
		{
			MethodName: "GetProcessor",
			Handler:    _ProcessorAPI_GetProcessor_Handler,
		},
		{
			MethodName: "GetRuns",
			Handler:    _ProcessorAPI_GetRuns_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _ProcessorAPI_GetRun_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ProcessorAPI_GetConfig_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _ProcessorAPI_Configure_Handler,
		},
		{
			MethodName: "GetRunData",
			Handler:    _ProcessorAPI_GetRunData_Handler,
		},
		{
			MethodName: "AddData",
			Handler:    _ProcessorAPI_AddData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRunState",
			Handler:       _ProcessorAPI_GetRunState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "processor.proto",
}
