// Code generated by go-enum
// DO NOT EDIT!

package api

import (
	"fmt"
)

const (
	// DataChunkStateVALIDATING is a DataChunkState of type VALIDATING
	// the processor is validating that the chunk can work with the current configuration
	DataChunkStateVALIDATING DataChunkState = iota
	// DataChunkStateDETERMINING is a DataChunkState of type DETERMINING
	// the processor is determining the External State of the chunk
	DataChunkStateDETERMINING
	// DataChunkStateRUNNING is a DataChunkState of type RUNNING
	// the processor is running on the chunk
	DataChunkStateRUNNING
)

const _DataChunkStateName = "VALIDATINGDETERMININGRUNNING"

var _DataChunkStateMap = map[DataChunkState]string{
	0: _DataChunkStateName[0:10],
	1: _DataChunkStateName[10:21],
	2: _DataChunkStateName[21:28],
}

// String implements the Stringer interface.
func (x DataChunkState) String() string {
	if str, ok := _DataChunkStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DataChunkState(%d)", x)
}

var _DataChunkStateValue = map[string]DataChunkState{
	_DataChunkStateName[0:10]:  0,
	_DataChunkStateName[10:21]: 1,
	_DataChunkStateName[21:28]: 2,
}

// ParseDataChunkState attempts to convert a string to a DataChunkState
func ParseDataChunkState(name string) (DataChunkState, error) {
	if x, ok := _DataChunkStateValue[name]; ok {
		return x, nil
	}
	return DataChunkState(0), fmt.Errorf("%s is not a valid DataChunkState", name)
}

// MarshalText implements the text marshaller method
func (x DataChunkState) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DataChunkState) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDataChunkState(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// StateUNINITIALIZED is a State of type UNINITIALIZED
	StateUNINITIALIZED State = iota + 1
	// StateCONFIGURED is a State of type CONFIGURED
	// processor has been configured successfully
	StateCONFIGURED
	// StateRUNNING is a State of type RUNNING
	// processor has recieved and begun processing at least one chunk
	StateRUNNING
	// StateSUCCESS is a State of type SUCCESS
	// processor has successfully processed all data chunks
	StateSUCCESS
	// StateCOMPLETED is a State of type COMPLETED
	// processor finished with at least one individual chunk failing but no fatal errors
	StateCOMPLETED
	// StateFAILURE is a State of type FAILURE
	// processor hit an irrecoverable error and terminated
	StateFAILURE
)

const _StateName = "UNINITIALIZEDCONFIGUREDRUNNINGSUCCESSCOMPLETEDFAILURE"

var _StateMap = map[State]string{
	1: _StateName[0:13],
	2: _StateName[13:23],
	3: _StateName[23:30],
	4: _StateName[30:37],
	5: _StateName[37:46],
	6: _StateName[46:53],
}

// String implements the Stringer interface.
func (x State) String() string {
	if str, ok := _StateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("State(%d)", x)
}

var _StateValue = map[string]State{
	_StateName[0:13]:  1,
	_StateName[13:23]: 2,
	_StateName[23:30]: 3,
	_StateName[30:37]: 4,
	_StateName[37:46]: 5,
	_StateName[46:53]: 6,
}

// ParseState attempts to convert a string to a State
func ParseState(name string) (State, error) {
	if x, ok := _StateValue[name]; ok {
		return x, nil
	}
	return State(0), fmt.Errorf("%s is not a valid State", name)
}

// MarshalText implements the text marshaller method
func (x State) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *State) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseState(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
