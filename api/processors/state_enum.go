// Code generated by go-enum
// DO NOT EDIT!

package processors

import (
	"fmt"
)

const (
	// DataChunkStateWAITING is a DataChunkState of type WAITING
	// the processor is waiting for the chunk to arrive, either from an external or regular source
	DataChunkStateWAITING DataChunkState = iota + 1
	// DataChunkStateRUNNING is a DataChunkState of type RUNNING
	// the processor is running on the chunk
	DataChunkStateRUNNING
	// DataChunkStateSUCCEEDED is a DataChunkState of type SUCCEEDED
	// processor has successfully processed the data chunk
	DataChunkStateSUCCEEDED
	// DataChunkStateFAILED is a DataChunkState of type FAILED
	// processor hit an error and terminated processing for the chunk.
	DataChunkStateFAILED
)

const _DataChunkStateName = "WAITINGRUNNINGSUCCEEDEDFAILED"

var _DataChunkStateMap = map[DataChunkState]string{
	1: _DataChunkStateName[0:7],
	2: _DataChunkStateName[7:14],
	3: _DataChunkStateName[14:23],
	4: _DataChunkStateName[23:29],
}

// String implements the Stringer interface.
func (x DataChunkState) String() string {
	if str, ok := _DataChunkStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DataChunkState(%d)", x)
}

var _DataChunkStateValue = map[string]DataChunkState{
	_DataChunkStateName[0:7]:   1,
	_DataChunkStateName[7:14]:  2,
	_DataChunkStateName[14:23]: 3,
	_DataChunkStateName[23:29]: 4,
}

// ParseDataChunkState attempts to convert a string to a DataChunkState
func ParseDataChunkState(name string) (DataChunkState, error) {
	if x, ok := _DataChunkStateValue[name]; ok {
		return x, nil
	}
	return DataChunkState(0), fmt.Errorf("%s is not a valid DataChunkState", name)
}

// MarshalText implements the text marshaller method
func (x *DataChunkState) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DataChunkState) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDataChunkState(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// StateUNINITIALIZED is a State of type UNINITIALIZED
	StateUNINITIALIZED State = iota + 1
	// StateCONFIGURED is a State of type CONFIGURED
	// processor has been configured successfully
	StateCONFIGURED
	// StateRUNNING is a State of type RUNNING
	// processor has received and begun processing at least one chunk
	StateRUNNING
	// StateSUCCEEDED is a State of type SUCCEEDED
	// processor has successfully processed all data chunks
	StateSUCCEEDED
	// StateERRORED is a State of type ERRORED
	// processor finished with at least one individual chunk failing
	StateERRORED
)

const _StateName = "UNINITIALIZEDCONFIGUREDRUNNINGSUCCEEDEDERRORED"

var _StateMap = map[State]string{
	1: _StateName[0:13],
	2: _StateName[13:23],
	3: _StateName[23:30],
	4: _StateName[30:39],
	5: _StateName[39:46],
}

// String implements the Stringer interface.
func (x State) String() string {
	if str, ok := _StateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("State(%d)", x)
}

var _StateValue = map[string]State{
	_StateName[0:13]:  1,
	_StateName[13:23]: 2,
	_StateName[23:30]: 3,
	_StateName[30:39]: 4,
	_StateName[39:46]: 5,
}

// ParseState attempts to convert a string to a State
func ParseState(name string) (State, error) {
	if x, ok := _StateValue[name]; ok {
		return x, nil
	}
	return State(0), fmt.Errorf("%s is not a valid State", name)
}

// MarshalText implements the text marshaller method
func (x *State) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *State) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseState(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
