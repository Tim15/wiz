// Code generated by go-swagger; DO NOT EDIT.

package processors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// GetProcessorHandlerFunc turns a function with the right signature into a get processor handler
type GetProcessorHandlerFunc func(GetProcessorParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProcessorHandlerFunc) Handle(params GetProcessorParams) middleware.Responder {
	return fn(params)
}

// GetProcessorHandler interface for that can handle valid get processor params
type GetProcessorHandler interface {
	Handle(GetProcessorParams) middleware.Responder
}

// NewGetProcessor creates a new http.Handler for the get processor operation
func NewGetProcessor(ctx *middleware.Context, handler GetProcessorHandler) *GetProcessor {
	return &GetProcessor{Context: ctx, Handler: handler}
}

/*GetProcessor swagger:route GET /processor/{id} Processors getProcessor

GetProcessor

*/
type GetProcessor struct {
	Context *middleware.Context
	Handler GetProcessorHandler
}

func (o *GetProcessor) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetProcessorParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetProcessorOKBody get processor o k body
// swagger:model GetProcessorOKBody
type GetProcessorOKBody struct {

	// the machine readable processor ID
	// Required: true
	ID *string `json:"id"`

	// a human readable name for the processor
	// Required: true
	Name *string `json:"name"`

	// tags
	Tags []interface{} `json:"tags"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this get processor o k body
func (o *GetProcessorOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProcessorOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getProcessorOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetProcessorOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getProcessorOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetProcessorOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProcessorOKBody) UnmarshalBinary(b []byte) error {
	var res GetProcessorOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
