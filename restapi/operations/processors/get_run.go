// Code generated by go-swagger; DO NOT EDIT.

package processors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// GetRunHandlerFunc turns a function with the right signature into a get run handler
type GetRunHandlerFunc func(GetRunParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRunHandlerFunc) Handle(params GetRunParams) middleware.Responder {
	return fn(params)
}

// GetRunHandler interface for that can handle valid get run params
type GetRunHandler interface {
	Handle(GetRunParams) middleware.Responder
}

// NewGetRun creates a new http.Handler for the get run operation
func NewGetRun(ctx *middleware.Context, handler GetRunHandler) *GetRun {
	return &GetRun{Context: ctx, Handler: handler}
}

/*GetRun swagger:route GET /processor/{id}/run/{runID} Processors getRun

GetRun

In the future this may contain info about which chunks/streams have been 1. sent, 2. received, and 3. processed

*/
type GetRun struct {
	Context *middleware.Context
	Handler GetRunHandler
}

func (o *GetRun) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRunParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetRunOKBody get run o k body
// swagger:model GetRunOKBody
type GetRunOKBody struct {

	// the current configuration
	Configuration interface{} `json:"configuration,omitempty"`

	// the globally unique ID of the run
	// Required: true
	RunID *string `json:"runID"`

	// the state of the processor
	// Required: true
	// Enum: [Uninitialized Configured Idle Processing Failed Succeeded CompletedWithErrors]
	State *string `json:"state"`
}

// Validate validates this get run o k body
func (o *GetRunOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRunID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRunOKBody) validateRunID(formats strfmt.Registry) error {

	if err := validate.Required("getRunOK"+"."+"runID", "body", o.RunID); err != nil {
		return err
	}

	return nil
}

var getRunOKBodyTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Uninitialized","Configured","Idle","Processing","Failed","Succeeded","CompletedWithErrors"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getRunOKBodyTypeStatePropEnum = append(getRunOKBodyTypeStatePropEnum, v)
	}
}

const (

	// GetRunOKBodyStateUninitialized captures enum value "Uninitialized"
	GetRunOKBodyStateUninitialized string = "Uninitialized"

	// GetRunOKBodyStateConfigured captures enum value "Configured"
	GetRunOKBodyStateConfigured string = "Configured"

	// GetRunOKBodyStateIdle captures enum value "Idle"
	GetRunOKBodyStateIdle string = "Idle"

	// GetRunOKBodyStateProcessing captures enum value "Processing"
	GetRunOKBodyStateProcessing string = "Processing"

	// GetRunOKBodyStateFailed captures enum value "Failed"
	GetRunOKBodyStateFailed string = "Failed"

	// GetRunOKBodyStateSucceeded captures enum value "Succeeded"
	GetRunOKBodyStateSucceeded string = "Succeeded"

	// GetRunOKBodyStateCompletedWithErrors captures enum value "CompletedWithErrors"
	GetRunOKBodyStateCompletedWithErrors string = "CompletedWithErrors"
)

// prop value enum
func (o *GetRunOKBody) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getRunOKBodyTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *GetRunOKBody) validateState(formats strfmt.Registry) error {

	if err := validate.Required("getRunOK"+"."+"state", "body", o.State); err != nil {
		return err
	}

	// value enum
	if err := o.validateStateEnum("getRunOK"+"."+"state", "body", *o.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRunOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRunOKBody) UnmarshalBinary(b []byte) error {
	var res GetRunOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
