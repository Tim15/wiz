// Code generated by go-swagger; DO NOT EDIT.

package processors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// GetConfigHandlerFunc turns a function with the right signature into a get config handler
type GetConfigHandlerFunc func(GetConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetConfigHandlerFunc) Handle(params GetConfigParams) middleware.Responder {
	return fn(params)
}

// GetConfigHandler interface for that can handle valid get config params
type GetConfigHandler interface {
	Handle(GetConfigParams) middleware.Responder
}

// NewGetConfig creates a new http.Handler for the get config operation
func NewGetConfig(ctx *middleware.Context, handler GetConfigHandler) *GetConfig {
	return &GetConfig{Context: ctx, Handler: handler}
}

/*GetConfig swagger:route GET /processor/{id}/run/{runID}/configuration Processors getConfig

GetConfig

Returns the current configuration or an error if is uninitialized. This is to distinguish between a properly configured but null-valued configuration and an uninitialized config.

*/
type GetConfig struct {
	Context *middleware.Context
	Handler GetConfigHandler
}

func (o *GetConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetConfigInternalServerErrorBody get config internal server error body
// swagger:model GetConfigInternalServerErrorBody
type GetConfigInternalServerErrorBody struct {

	// The full trace of the error. This may only be available in a debug mode
	Trace string `json:"trace,omitempty"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this get config internal server error body
func (o *GetConfigInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetConfigInternalServerErrorBody) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("getConfigInternalServerError"+"."+"value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetConfigInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetConfigInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetConfigInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
