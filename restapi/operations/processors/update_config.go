// Code generated by go-swagger; DO NOT EDIT.

package processors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// UpdateConfigHandlerFunc turns a function with the right signature into a update config handler
type UpdateConfigHandlerFunc func(UpdateConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateConfigHandlerFunc) Handle(params UpdateConfigParams) middleware.Responder {
	return fn(params)
}

// UpdateConfigHandler interface for that can handle valid update config params
type UpdateConfigHandler interface {
	Handle(UpdateConfigParams) middleware.Responder
}

// NewUpdateConfig creates a new http.Handler for the update config operation
func NewUpdateConfig(ctx *middleware.Context, handler UpdateConfigHandler) *UpdateConfig {
	return &UpdateConfig{Context: ctx, Handler: handler}
}

/*UpdateConfig swagger:route POST /processor/{id}/run/{runID}/configuration Processors updateConfig

UpdateConfig

Configure configures the given processor runID, and returns an error if the configuration is invalid. It returns the applied configuration on sucess.

TODO: how to handle old versions of configuration and updates: pull a GM-Control and require a hash? or just a simple version number?

*/
type UpdateConfig struct {
	Context *middleware.Context
	Handler UpdateConfigHandler
}

func (o *UpdateConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateConfigBadRequestBody update config bad request body
// swagger:model UpdateConfigBadRequestBody
type UpdateConfigBadRequestBody struct {

	// The full trace of the error. This may only be available in a debug mode
	Trace string `json:"trace,omitempty"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this update config bad request body
func (o *UpdateConfigBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateConfigBadRequestBody) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("updateConfigBadRequest"+"."+"value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateConfigBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateConfigBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateConfigBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateConfigBody update config body
// swagger:model UpdateConfigBody
type UpdateConfigBody struct {

	// commit
	Commit string `json:"commit,omitempty"`

	// repo
	Repo string `json:"repo,omitempty"`
}

// Validate validates this update config body
func (o *UpdateConfigBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateConfigBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateConfigBody) UnmarshalBinary(b []byte) error {
	var res UpdateConfigBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
