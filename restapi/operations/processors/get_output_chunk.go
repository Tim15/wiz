// Code generated by go-swagger; DO NOT EDIT.

package processors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// GetOutputChunkHandlerFunc turns a function with the right signature into a get output chunk handler
type GetOutputChunkHandlerFunc func(GetOutputChunkParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOutputChunkHandlerFunc) Handle(params GetOutputChunkParams) middleware.Responder {
	return fn(params)
}

// GetOutputChunkHandler interface for that can handle valid get output chunk params
type GetOutputChunkHandler interface {
	Handle(GetOutputChunkParams) middleware.Responder
}

// NewGetOutputChunk creates a new http.Handler for the get output chunk operation
func NewGetOutputChunk(ctx *middleware.Context, handler GetOutputChunkHandler) *GetOutputChunk {
	return &GetOutputChunk{Context: ctx, Handler: handler}
}

/*GetOutputChunk swagger:route GET /processor/{id}/run/{runID}/data/output/{chunkID} Processors getOutputChunk

GetOutputChunk

*/
type GetOutputChunk struct {
	Context *middleware.Context
	Handler GetOutputChunkHandler
}

func (o *GetOutputChunk) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetOutputChunkParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetOutputChunkOKBody get output chunk o k body
// swagger:model GetOutputChunkOKBody
type GetOutputChunkOKBody struct {

	// the ID of the chunk
	// Required: true
	ChunkID *string `json:"chunk_id"`

	// data
	Data interface{} `json:"data,omitempty"`

	// error
	Error *GetOutputChunkOKBodyError `json:"error,omitempty"`

	// the state of the data chunk.
	// Required: true
	// Enum: [Syncing Determining Validating Running Failed Succeeded]
	State *string `json:"state"`
}

// Validate validates this get output chunk o k body
func (o *GetOutputChunkOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChunkID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOutputChunkOKBody) validateChunkID(formats strfmt.Registry) error {

	if err := validate.Required("getOutputChunkOK"+"."+"chunk_id", "body", o.ChunkID); err != nil {
		return err
	}

	return nil
}

func (o *GetOutputChunkOKBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOutputChunkOK" + "." + "error")
			}
			return err
		}
	}

	return nil
}

var getOutputChunkOKBodyTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Syncing","Determining","Validating","Running","Failed","Succeeded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOutputChunkOKBodyTypeStatePropEnum = append(getOutputChunkOKBodyTypeStatePropEnum, v)
	}
}

const (

	// GetOutputChunkOKBodyStateSyncing captures enum value "Syncing"
	GetOutputChunkOKBodyStateSyncing string = "Syncing"

	// GetOutputChunkOKBodyStateDetermining captures enum value "Determining"
	GetOutputChunkOKBodyStateDetermining string = "Determining"

	// GetOutputChunkOKBodyStateValidating captures enum value "Validating"
	GetOutputChunkOKBodyStateValidating string = "Validating"

	// GetOutputChunkOKBodyStateRunning captures enum value "Running"
	GetOutputChunkOKBodyStateRunning string = "Running"

	// GetOutputChunkOKBodyStateFailed captures enum value "Failed"
	GetOutputChunkOKBodyStateFailed string = "Failed"

	// GetOutputChunkOKBodyStateSucceeded captures enum value "Succeeded"
	GetOutputChunkOKBodyStateSucceeded string = "Succeeded"
)

// prop value enum
func (o *GetOutputChunkOKBody) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getOutputChunkOKBodyTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *GetOutputChunkOKBody) validateState(formats strfmt.Registry) error {

	if err := validate.Required("getOutputChunkOK"+"."+"state", "body", o.State); err != nil {
		return err
	}

	// value enum
	if err := o.validateStateEnum("getOutputChunkOK"+"."+"state", "body", *o.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOutputChunkOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOutputChunkOKBody) UnmarshalBinary(b []byte) error {
	var res GetOutputChunkOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetOutputChunkOKBodyError the error which caused the chunk to fail if it is in the Failed state
// swagger:model GetOutputChunkOKBodyError
type GetOutputChunkOKBodyError struct {

	// The full trace of the error. This may only be available in a debug mode
	Trace string `json:"trace,omitempty"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this get output chunk o k body error
func (o *GetOutputChunkOKBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOutputChunkOKBodyError) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("getOutputChunkOK"+"."+"error"+"."+"value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOutputChunkOKBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOutputChunkOKBodyError) UnmarshalBinary(b []byte) error {
	var res GetOutputChunkOKBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
