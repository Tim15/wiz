// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-12-30 00:50:19.241730374 -0500 EST m=+0.088568314

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/processors": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieves all processors",
                "operationId": "GetAllProcessors",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Processors"
                        }
                    }
                }
            }
        },
        "/processors/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieves a single processor",
                "operationId": "GetProcessor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Processor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Processor"
                        }
                    }
                }
            }
        },
        "/processors/{procID}/runs": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieves all runs",
                "operationId": "GetAllRuns",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Processor ID",
                        "name": "procID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Runs"
                        }
                    }
                }
            }
        },
        "/processors/{procID}/runs/{runID}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieves a single run",
                "operationId": "GetRun",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Processor ID",
                        "name": "procID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Run ID",
                        "name": "runID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Run"
                        }
                    }
                }
            }
        },
        "/processors/{procID}/runs/{runID}/config": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieves a single run's configuration",
                "operationId": "GetConfig",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Processor ID",
                        "name": "procID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Run ID",
                        "name": "runID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Configuration"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Sets a single run's configuration",
                "operationId": "Configure",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Processor ID",
                        "name": "procID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Run ID",
                        "name": "runID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Configuration to set",
                        "name": "configuration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Configuration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/processors/{procID}/runs/{runID}/data": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Gets data to the run",
                "operationId": "GetData",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Processor ID",
                        "name": "procID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Run ID",
                        "name": "runID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.DataSpec"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Adds data from the run",
                "operationId": "AddData",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Processor ID",
                        "name": "procID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Run ID",
                        "name": "runID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Data to add",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Data"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Configuration": {
            "type": "object",
            "properties": {
                "ExecutorConfig": {
                    "type": "object",
                    "$ref": "#/definitions/api.ExecutorConfig"
                },
                "ExpectedData": {
                    "description": "Embeded structs have a weird JSON serialization issue",
                    "type": "object",
                    "$ref": "#/definitions/api.ExpectedData"
                },
                "Processor": {
                    "type": "object"
                }
            }
        },
        "api.Data": {
            "type": "object",
            "properties": {
                "AssociatedChunkID": {
                    "description": "this is a reference to the opposing data chunk. If it is an input chunk this references the output.\nIf it is an output chunk it references the input chunk",
                    "type": "string"
                },
                "ChunkID": {
                    "type": "string"
                },
                "FilesystemReference": {
                    "type": "object",
                    "$ref": "#/definitions/api.FilesystemReference"
                },
                "Format": {
                    "type": "integer"
                },
                "RawData": {
                    "type": "object"
                },
                "State": {
                    "type": "integer"
                },
                "Type": {
                    "type": "integer"
                }
            }
        },
        "api.DataSpec": {
            "type": "object",
            "properties": {
                "In": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Data"
                    }
                },
                "Out": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Data"
                    }
                }
            }
        },
        "api.ExecutorConfig": {
            "type": "object",
            "properties": {
                "DownstreamLocations": {
                    "description": "TODO: make API URL templating agnostic, refactor into server package\ne.g. Server.GetProc(procID, runID) will return /processors/procID/runs/runID\nthis could be used both for generating endpoints and here, for passing outputs downstream",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "Hostname": {
                                "type": "string"
                            },
                            "ProcID": {
                                "type": "string"
                            },
                            "RunID": {
                                "type": "string"
                            }
                        }
                    }
                },
                "MaxWorkers": {
                    "type": "integer"
                },
                "SendDownstream": {
                    "type": "boolean"
                }
            }
        },
        "api.ExpectedData": {
            "type": "object",
            "properties": {
                "NumChunks": {
                    "description": "a counter value",
                    "type": "integer"
                }
            }
        },
        "api.FilesystemReference": {
            "type": "object",
            "properties": {
                "Driver": {
                    "description": "the filesystem driver (e.g. NFS, local, ZFS, etc)",
                    "type": "string"
                },
                "Location": {
                    "description": "the actual file path location",
                    "type": "string"
                }
            }
        },
        "api.Processor": {
            "type": "object",
            "properties": {
                "Name": {
                    "description": "Name is the human readable name",
                    "type": "string"
                },
                "ProcID": {
                    "description": "ProcID is the uniquely identifiable Processor ID",
                    "type": "string"
                },
                "Version": {
                    "type": "string"
                }
            }
        },
        "api.Processors": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/api.Processor"
            }
        },
        "api.Run": {
            "type": "object",
            "properties": {
                "Configuration": {
                    "type": "object",
                    "$ref": "#/definitions/api.Configuration"
                },
                "CurrentState": {
                    "description": "Note: Embedding structs will automatically promote the child struct's functions,\nand since our State type is an enum that overrides the default Marshal and Unmarshal functions,\nit overwrites it for the parent type as well.\nRemember, the CurrentState must be updated from the RunProcessor state to be fresh. TODO: think about these guarantees",
                    "type": "integer"
                },
                "RunID": {
                    "type": "string"
                }
            }
        },
        "api.Runs": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/api.Run"
            }
        },
        "server.Empty": {
            "type": "object"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Wiz Processor API",
	Description: "This is the HTTP + JSON + REST version of the Wiz Processor API.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
