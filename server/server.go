//implements a server for the Wiz Processor Server API interface
//default is http
package server

import (
	"github.com/alexkreidler/wiz/api"
	"github.com/gin-gonic/gin"
	"log"

	swaggerFiles "github.com/swaggo/files"
	"github.com/swaggo/gin-swagger"

	_ "github.com/alexkreidler/wiz/docs" // docs is generated by Swag CLI, you have to import it.
	//"net/http/httputil"
)

type Empty struct {
}

type Server struct {
	apiServer api.ProcessorServer
	engine    *gin.Engine
}

// @title Wiz Processor API
// @version 1.0
// @description This is the HTTP + JSON + REST version of the Wiz Processor API.

// @license.name Apache 2.0

// @host localhost:8080
// @BasePath /
func NewServer(server api.ProcessorServer) *Server {
	s := &Server{apiServer: server}
	s.Setup()
	return s
}

func (s *Server) Setup() {

	// Creates a gin router with default middleware:
	// logger and recovery (crash-free) middleware
	router := gin.Default()

	// Basic GET requests
	router.GET("/processors", s.GetAllProcessors)
	router.GET("/processors/:procID", s.GetProcessor)
	router.GET("/processors/:procID/runs", s.GetAllRuns)
	router.GET("/processors/:procID/runs/:runID", s.GetRun)

	// Configuration and manipulation requests
	router.GET("/processors/:procID/runs/:runID/config", s.GetConfig)
	router.POST("/processors/:procID/runs/:runID/config", s.Configure)

	// Data reqs
	router.GET("/processors/:procID/runs/:runID/data", s.GetData)
	router.POST("/processors/:procID/runs/:runID/data", s.AddData)

	// Swagger setup

	url := ginSwagger.URL("http://localhost:8080/swagger/doc.json") // The url pointing to API definition
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	s.engine = router
}

func (s Server) Run(addr ...string) error {
	return s.engine.Run(addr...)
}

// GetAllProcessors godoc
// @Summary Retrieves all processors
// @ID GetAllProcessors
// @Accept  json
// @Produce  json
// @Success 200 {object} api.Processors
// @Router /processors [get]
func (s Server) GetAllProcessors(c *gin.Context) {
	p, err := s.apiServer.GetAllProcessors()
	if err != nil {
		c.Error(err)
	}
	c.JSON(200, p)
}

// GetProcessor godoc
// @Summary Retrieves a single processor
// @ID GetProcessor
// @Param id path string true "Processor ID"
// @Accept  json
// @Produce  json
// @Success 200 {object} api.Processor
// @Router /processors/{id} [get]
func (s Server) GetProcessor(c *gin.Context) {
	id := c.Param("procID")
	p, err := s.apiServer.GetProcessor(id)
	if err != nil {
		c.Error(err)
	}
	c.JSON(200, p)
}

// GetAllRuns godoc
// @Summary Retrieves all runs
// @ID GetAllRuns
// @Param procID path string true "Processor ID"
// @Accept  json
// @Produce  json
// @Success 200 {object} api.Runs
// @Router /processors/{procID}/runs [get]
func (s Server) GetAllRuns(c *gin.Context) {
	id := c.Param("procID")
	p, err := s.apiServer.GetRuns(id)
	if err != nil {
		c.Error(err)
	}
	c.JSON(200, p)
}

// GetRun godoc
// @Summary Retrieves a single run
// @ID GetRun
// @Param procID path string true "Processor ID"
// @Param runID path string true "Run ID"
// @Accept  json
// @Produce  json
// @Success 200 {object} api.Run
// @Router /processors/{procID}/runs/{runID} [get]
func (s Server) GetRun(c *gin.Context) {
	procID := c.Param("procID")
	runID := c.Param("runID")
	p, err := s.apiServer.GetRun(procID, runID)
	if err != nil {
		c.Error(err)
	}
	c.JSON(200, p)
}

// GetConfig godoc
// @Summary Retrieves a single run's configuration
// @ID GetConfig
// @Param procID path string true "Processor ID"
// @Param runID path string true "Run ID"
// @Accept  json
// @Produce  json
// @Success 200 {object} api.Configuration
// @Router /processors/{procID}/runs/{runID}/config [get]
func (s Server) GetConfig(c *gin.Context) {
	procID := c.Param("procID")
	runID := c.Param("runID")
	p, err := s.apiServer.GetConfig(procID, runID)
	if err != nil {
		c.Error(err)
	}
	c.JSON(200, p)
}

// Configure godoc
// @Summary Sets a single run's configuration
// @ID Configure
// @Param procID path string true "Processor ID"
// @Param runID path string true "Run ID"
// @Param configuration body api.Configuration true "Configuration to set"
// @Accept  json
// @Produce  json
// @Success 200 {boolean} Empty
// @Router /processors/{procID}/runs/{runID}/config [post]
func (s Server) Configure(c *gin.Context) {
	procID := c.Param("procID")
	runID := c.Param("runID")
	var data api.Configuration

	err := c.BindJSON(&data)
	if err != nil {
		c.Error(err)
	}

	log.Printf("got config: %#+v", data)
	err = s.apiServer.Configure(procID, runID, data)
	if err != nil {
		c.Error(err)
	}
	c.Status(200)
}

// GetData godoc
// @Summary Gets data to the run
// @ID GetData
// @Param procID path string true "Processor ID"
// @Param runID path string true "Run ID"
// @Accept  json
// @Produce  json
// @Success 200 {object} api.DataSpec
// @Router /processors/{procID}/runs/{runID}/data [get]
func (s Server) GetData(c *gin.Context) {
	procID := c.Param("procID")
	runID := c.Param("runID")
	p, err := s.apiServer.GetRunData(procID, runID)
	if err != nil {
		c.Error(err)
	}
	c.JSON(200, p)
}

// AddData godoc
// @Summary Adds data from the run
// @ID AddData
// @Param procID path string true "Processor ID"
// @Param runID path string true "Run ID"
// @Param data body api.Data true "Data to add"
// @Accept  json
// @Produce  json
// @Success 200 {boolean} Empty
// @Router /processors/{procID}/runs/{runID}/data [post]
func (s Server) AddData(c *gin.Context) {
	procID := c.Param("procID")
	runID := c.Param("runID")
	var data api.Data
	err := c.BindJSON(&data)
	//c.MustBindWith()
	if err != nil {
		c.Error(err)
		return
	}

	err = s.apiServer.AddData(procID, runID, data)
	if err != nil {
		c.Error(err)
	}
	c.Status(200)
}
